{"version":3,"file":"static/js/884.e18acc5f.chunk.js","mappings":"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","sources":["services/netlifyApi.ts","services/proxyApi.ts","services/trackshipApi.ts"],"sourcesContent":["import { TrackingStatus } from './trackshipApi';\n\nclass NetlifyApiService {\n  private baseUrl: string;\n\n  constructor() {\n    // Use the current domain for Netlify functions\n    this.baseUrl = window.location.origin;\n  }\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Making Netlify API request for:', trackingNumber);\n      \n      const response = await fetch(`${this.baseUrl}/.netlify/functions/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId: orderId || `order_${Date.now()}`,\n          postalCode: postalCode || '00000'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Netlify API response:', data);\n\n      if (!data.success) {\n        throw new Error(data.error || 'API request failed');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Netlify API request failed:', error);\n      throw error;\n    }\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nexport const netlifyApiService = new NetlifyApiService(); ","// Proxy API Service for Trackship tracking\n// This service calls our local proxy server to avoid CORS issues\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nclass ProxyApiService {\n  private baseUrl = 'http://localhost:3001/api';\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Making proxy API request for:', trackingNumber);\n\n      const response = await fetch(`${this.baseUrl}/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId,\n          postalCode,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Proxy API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Proxy API response:', data);\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to get tracking data');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Proxy API request failed:', error);\n      throw error;\n    }\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nexport const proxyApiService = new ProxyApiService(); ","// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.com/ for API access\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nexport interface TrackshipCreateResponse {\n  status: string;\n  status_msg: string;\n  trackers_balance: string;\n  user_plan: string;\n}\n\nexport interface TrackshipTrackingResponse {\n  status: string;\n  status_msg: string;\n  data?: {\n    tracking_number: string;\n    carrier: string;\n    status: string;\n    status_description: string;\n    estimated_delivery?: string;\n    events: Array<{\n      status: string;\n      status_description: string;\n      location?: string;\n      timestamp: string;\n    }>;\n  };\n}\n\nclass TrackshipApiService {\n  private baseUrl = 'https://api.trackship.com/v1';\n  private apiKey: string;\n  private appName: string;\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    this.appName = process.env.REACT_APP_TRACKSHIP_APP_NAME || 'Workspace Shipping Dashboard';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n    console.log('App Name:', this.appName);\n  }\n\n  private detectCarrier(trackingNumber: string): string {\n    // Simple carrier detection based on tracking number format\n    if (trackingNumber.startsWith('1Z')) return 'ups';\n    if (trackingNumber.startsWith('940') || trackingNumber.startsWith('93')) return 'usps';\n    if (trackingNumber.startsWith('DHL') || trackingNumber.length === 10) return 'dhl';\n    if (trackingNumber.length === 12) return 'fedex';\n    return 'ups'; // Default to UPS\n  }\n\n  private async createShipment(trackingNumber: string, orderId: string, postalCode?: string): Promise<TrackshipCreateResponse> {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n\n    console.log('Creating shipment for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n\n    try {\n      const requestBody = {\n        tracking_number: trackingNumber,\n        tracking_provider: this.detectCarrier(trackingNumber),\n        order_id: orderId,\n        postal_code: postalCode || '00000',\n        destination_country: 'US',\n        app_name: this.appName\n      };\n\n      console.log('Request body:', requestBody);\n      console.log('Request URL:', `${this.baseUrl}/shipment/create/`);\n\n      const response = await fetch(`${this.baseUrl}/shipment/create/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'trackship-api-key': this.apiKey,\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Trackship API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response data:', data);\n      return data as TrackshipCreateResponse;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n\n  private parseStatus(status: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (\n      lowerStatus.includes('in_transit') || \n      lowerStatus.includes('picked_up') || \n      lowerDescription.includes('in transit') ||\n      lowerDescription.includes('picked up')\n    ) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Getting tracking status for:', trackingNumber);\n      \n      // First, create the shipment in Trackship\n      const orderIdToUse = orderId || `order_${Date.now()}`;\n      const createResponse = await this.createShipment(trackingNumber, orderIdToUse, postalCode);\n      \n      console.log('Shipment creation response:', createResponse);\n      \n      if (createResponse.status !== 'ok') {\n        throw new Error(`Failed to create shipment: ${createResponse.status_msg}`);\n      }\n\n      // For now, return mock data since we need to implement the tracking retrieval\n      // In a real implementation, you would make another API call to get the tracking details\n      const carrier = this.detectCarrier(trackingNumber);\n      const status = 'shipped'; // Mock status\n      \n             const result = {\n         trackingNumber,\n         status: status as 'pending' | 'shipped' | 'delivered',\n         lastActivity: new Date().toISOString(),\n         estimatedDelivery: '2024-01-20',\n         currentLocation: 'Distribution Center',\n         statusDescription: 'Package in transit',\n         carrier: carrier.toUpperCase(),\n       };\n\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses and carriers based on tracking number\n    const mockData: Record<string, { status: 'pending' | 'shipped' | 'delivered', carrier: string }> = {\n      'UPS123456789': { status: 'pending', carrier: 'UPS' },\n      'FEDEX987654321': { status: 'shipped', carrier: 'FedEx' },\n      'USPS555666777': { status: 'delivered', carrier: 'USPS' },\n      'DHL888999000': { status: 'shipped', carrier: 'DHL' },\n      '1Z999AA1234567890': { status: 'shipped', carrier: 'UPS' },\n      '9400100000000000000000': { status: 'delivered', carrier: 'USPS' },\n    };\n\n    const mockInfo = mockData[trackingNumber] || { status: 'pending', carrier: 'Unknown' };\n    \n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully',\n    };\n\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  const useProxy = process.env.REACT_APP_USE_PROXY_API === 'true';\n  const isProduction = window.location.hostname !== 'localhost';\n  \n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    useProxy,\n    isProduction,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  \n  if (isProduction && useProxy) {\n    console.log('Using Netlify API service for production');\n    const { netlifyApiService } = require('./netlifyApi');\n    return netlifyApiService;\n  }\n  \n  if (useProxy) {\n    console.log('Using proxy API service');\n    const { proxyApiService } = require('./proxyApi');\n    return proxyApiService;\n  }\n  \n  if (useRealApi && hasCredentials) {\n    console.log('Using real Trackship API (may have CORS issues)');\n    return trackshipApiService;\n  }\n  \n  console.log('Using mock Trackship API');\n  return mockTrackshipApiService;\n}; "],"names":["netlifyApiService","constructor","baseUrl","this","window","location","origin","getTrackingStatus","trackingNumber","orderId","postalCode","console","log","response","fetch","method","headers","body","JSON","stringify","Date","now","ok","Error","status","data","json","success","error","getBatchTrackingStatus","trackingNumbers","promises","map","async","index","lastActivity","statusDescription","Promise","all","proxyApiService","apiKey","appName","process","detectCarrier","startsWith","length","createShipment","substring","requestBody","tracking_number","tracking_provider","order_id","postal_code","destination_country","app_name","Object","fromEntries","entries","errorText","text","parseStatus","description","lowerStatus","toLowerCase","lowerDescription","includes","orderIdToUse","createResponse","status_msg","carrier","result","toISOString","estimatedDelivery","currentLocation","toUpperCase","resolve","setTimeout","mockInfo","undefined","pending","shipped","delivered","getTrackingService","useRealApi","hasCredentials","useProxy","isProduction","hostname","require"],"sourceRoot":""}