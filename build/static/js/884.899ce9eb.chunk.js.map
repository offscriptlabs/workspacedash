{"version":3,"file":"static/js/884.899ce9eb.chunk.js","mappings":"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","sources":["services/proxyApi.ts","services/trackshipApi.ts"],"sourcesContent":["// Proxy API Service for Trackship tracking\n// This service calls our local proxy server to avoid CORS issues\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nclass ProxyApiService {\n  private baseUrl = 'http://localhost:3001/api';\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Making proxy API request for:', trackingNumber);\n\n      const response = await fetch(`${this.baseUrl}/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId,\n          postalCode,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Proxy API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Proxy API response:', data);\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to get tracking data');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Proxy API request failed:', error);\n      throw error;\n    }\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nexport const proxyApiService = new ProxyApiService(); ","// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.com/ for API access\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nexport interface TrackshipCreateResponse {\n  status: string;\n  status_msg: string;\n  trackers_balance: string;\n  user_plan: string;\n}\n\nexport interface TrackshipTrackingResponse {\n  status: string;\n  status_msg: string;\n  data?: {\n    tracking_number: string;\n    carrier: string;\n    status: string;\n    status_description: string;\n    estimated_delivery?: string;\n    events: Array<{\n      status: string;\n      status_description: string;\n      location?: string;\n      timestamp: string;\n    }>;\n  };\n}\n\nclass TrackshipApiService {\n  private baseUrl = 'https://api.trackship.com/v1';\n  private apiKey: string;\n  private appName: string;\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    this.appName = process.env.REACT_APP_TRACKSHIP_APP_NAME || 'Workspace Shipping Dashboard';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n    console.log('App Name:', this.appName);\n  }\n\n  private detectCarrier(trackingNumber: string): string {\n    // Simple carrier detection based on tracking number format\n    if (trackingNumber.startsWith('1Z')) return 'ups';\n    if (trackingNumber.startsWith('940') || trackingNumber.startsWith('93')) return 'usps';\n    if (trackingNumber.startsWith('DHL') || trackingNumber.length === 10) return 'dhl';\n    if (trackingNumber.length === 12) return 'fedex';\n    return 'ups'; // Default to UPS\n  }\n\n  private async createShipment(trackingNumber: string, orderId: string, postalCode?: string): Promise<TrackshipCreateResponse> {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n\n    console.log('Creating shipment for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n\n    try {\n      const requestBody = {\n        tracking_number: trackingNumber,\n        tracking_provider: this.detectCarrier(trackingNumber),\n        order_id: orderId,\n        postal_code: postalCode || '00000',\n        destination_country: 'US',\n        app_name: this.appName\n      };\n\n      console.log('Request body:', requestBody);\n      console.log('Request URL:', `${this.baseUrl}/shipment/create/`);\n\n      const response = await fetch(`${this.baseUrl}/shipment/create/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'trackship-api-key': this.apiKey,\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Trackship API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response data:', data);\n      return data as TrackshipCreateResponse;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n\n  private parseStatus(status: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (\n      lowerStatus.includes('in_transit') || \n      lowerStatus.includes('picked_up') || \n      lowerDescription.includes('in transit') ||\n      lowerDescription.includes('picked up')\n    ) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Getting tracking status for:', trackingNumber);\n      \n      // First, create the shipment in Trackship\n      const orderIdToUse = orderId || `order_${Date.now()}`;\n      const createResponse = await this.createShipment(trackingNumber, orderIdToUse, postalCode);\n      \n      console.log('Shipment creation response:', createResponse);\n      \n      if (createResponse.status !== 'ok') {\n        throw new Error(`Failed to create shipment: ${createResponse.status_msg}`);\n      }\n\n      // For now, return mock data since we need to implement the tracking retrieval\n      // In a real implementation, you would make another API call to get the tracking details\n      const carrier = this.detectCarrier(trackingNumber);\n      const status = 'shipped'; // Mock status\n      \n             const result = {\n         trackingNumber,\n         status: status as 'pending' | 'shipped' | 'delivered',\n         lastActivity: new Date().toISOString(),\n         estimatedDelivery: '2024-01-20',\n         currentLocation: 'Distribution Center',\n         statusDescription: 'Package in transit',\n         carrier: carrier.toUpperCase(),\n       };\n\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses and carriers based on tracking number\n    const mockData: Record<string, { status: 'pending' | 'shipped' | 'delivered', carrier: string }> = {\n      'UPS123456789': { status: 'pending', carrier: 'UPS' },\n      'FEDEX987654321': { status: 'shipped', carrier: 'FedEx' },\n      'USPS555666777': { status: 'delivered', carrier: 'USPS' },\n      'DHL888999000': { status: 'shipped', carrier: 'DHL' },\n      '1Z999AA1234567890': { status: 'shipped', carrier: 'UPS' },\n      '9400100000000000000000': { status: 'delivered', carrier: 'USPS' },\n    };\n\n    const mockInfo = mockData[trackingNumber] || { status: 'pending', carrier: 'Unknown' };\n    \n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully',\n    };\n\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  const useProxy = process.env.REACT_APP_USE_PROXY_API === 'true';\n  \n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    useProxy,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  \n  if (useProxy) {\n    console.log('Using proxy API service');\n    const { proxyApiService } = require('./proxyApi');\n    return proxyApiService;\n  }\n  \n  if (useRealApi && hasCredentials) {\n    console.log('Using real Trackship API (may have CORS issues)');\n    return trackshipApiService;\n  }\n  \n  console.log('Using mock Trackship API');\n  return mockTrackshipApiService;\n}; "],"names":["proxyApiService","constructor","baseUrl","getTrackingStatus","trackingNumber","orderId","postalCode","console","log","response","fetch","this","method","headers","body","JSON","stringify","ok","Error","status","data","json","success","error","getBatchTrackingStatus","trackingNumbers","promises","map","async","index","lastActivity","statusDescription","Promise","all","apiKey","appName","process","detectCarrier","startsWith","length","createShipment","substring","requestBody","tracking_number","tracking_provider","order_id","postal_code","destination_country","app_name","Object","fromEntries","entries","errorText","text","parseStatus","description","lowerStatus","toLowerCase","lowerDescription","includes","orderIdToUse","Date","now","createResponse","status_msg","carrier","result","toISOString","estimatedDelivery","currentLocation","toUpperCase","resolve","setTimeout","mockInfo","undefined","pending","shipped","delivered","getTrackingService","useRealApi","hasCredentials","useProxy","require"],"sourceRoot":""}