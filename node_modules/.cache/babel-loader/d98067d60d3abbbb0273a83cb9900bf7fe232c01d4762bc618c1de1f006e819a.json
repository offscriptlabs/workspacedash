{"ast":null,"code":"// Proxy API Service for Trackship tracking\n// This service calls our local proxy server to avoid CORS issues\nclass ProxyApiService{constructor(){this.baseUrl='http://localhost:3001/api';}async getTrackingStatus(trackingNumber,orderId,postalCode){try{console.log('Making proxy API request for:',trackingNumber);const response=await fetch(`${this.baseUrl}/tracking`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({trackingNumber,orderId,postalCode})});if(!response.ok){throw new Error(`Proxy API error: ${response.status}`);}const data=await response.json();console.log('Proxy API response:',data);if(!data.success){throw new Error(data.error||'Failed to get tracking data');}return data.data;}catch(error){console.error('Proxy API request failed:',error);throw error;}}async getBatchTrackingStatus(trackingNumbers){const promises=trackingNumbers.map(async(trackingNumber,index)=>{try{return await this.getTrackingStatus(trackingNumber,`batch_${index}`);}catch(error){console.error(`Failed to track ${trackingNumber}:`,error);return{trackingNumber,status:'pending',lastActivity:'',statusDescription:'Tracking unavailable'};}});return Promise.all(promises);}}export const proxyApiService=new ProxyApiService();","map":{"version":3,"names":["ProxyApiService","constructor","baseUrl","getTrackingStatus","trackingNumber","orderId","postalCode","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","success","error","getBatchTrackingStatus","trackingNumbers","promises","map","index","lastActivity","statusDescription","Promise","all","proxyApiService"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/proxyApi.ts"],"sourcesContent":["// Proxy API Service for Trackship tracking\n// This service calls our local proxy server to avoid CORS issues\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nclass ProxyApiService {\n  private baseUrl = 'http://localhost:3001/api';\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Making proxy API request for:', trackingNumber);\n\n      const response = await fetch(`${this.baseUrl}/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId,\n          postalCode,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Proxy API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Proxy API response:', data);\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to get tracking data');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Proxy API request failed:', error);\n      throw error;\n    }\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nexport const proxyApiService = new ProxyApiService(); "],"mappings":"AAAA;AACA;AAYA,KAAM,CAAAA,eAAgB,CAAAC,YAAA,OACZC,OAAO,CAAG,2BAA2B,EAE7C,KAAM,CAAAC,iBAAiBA,CAACC,cAAsB,CAAEC,OAAgB,CAAEC,UAAmB,CAA2B,CAC9G,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAEJ,cAAc,CAAC,CAE5D,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAG,IAAI,CAACR,OAAO,WAAW,CAAE,CACvDS,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBX,cAAc,CACdC,OAAO,CACPC,UACF,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACG,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,oBAAoBR,QAAQ,CAACS,MAAM,EAAE,CAAC,CACxD,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAClCb,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEW,IAAI,CAAC,CAExC,GAAI,CAACA,IAAI,CAACE,OAAO,CAAE,CACjB,KAAM,IAAI,CAAAJ,KAAK,CAACE,IAAI,CAACG,KAAK,EAAI,6BAA6B,CAAC,CAC9D,CAEA,MAAO,CAAAH,IAAI,CAACA,IAAI,CAClB,CAAE,MAAOG,KAAK,CAAE,CACdf,OAAO,CAACe,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAAC,sBAAsBA,CAACC,eAAyB,CAA6B,CACjF,KAAM,CAAAC,QAAQ,CAAGD,eAAe,CAACE,GAAG,CAAC,MAAOtB,cAAc,CAAEuB,KAAK,GAAK,CACpE,GAAI,CACF,MAAO,MAAM,KAAI,CAACxB,iBAAiB,CAACC,cAAc,CAAE,SAASuB,KAAK,EAAE,CAAC,CACvE,CAAE,MAAOL,KAAK,CAAE,CACdf,OAAO,CAACe,KAAK,CAAC,mBAAmBlB,cAAc,GAAG,CAAEkB,KAAK,CAAC,CAC1D,MAAO,CACLlB,cAAc,CACdc,MAAM,CAAE,SAAkB,CAC1BU,YAAY,CAAE,EAAE,CAChBC,iBAAiB,CAAE,sBACrB,CAAC,CACH,CACF,CAAC,CAAC,CAEF,MAAO,CAAAC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC,CAC9B,CACF,CAEA,MAAO,MAAM,CAAAO,eAAe,CAAG,GAAI,CAAAhC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}