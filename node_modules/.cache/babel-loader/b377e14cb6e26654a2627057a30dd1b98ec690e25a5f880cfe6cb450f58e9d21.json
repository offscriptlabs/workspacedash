{"ast":null,"code":"// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.com/ for API access\n\nclass TrackshipApiService {\n  constructor() {\n    this.baseUrl = 'https://api.trackship.com/v1';\n    this.apiKey = void 0;\n    this.appName = void 0;\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    this.appName = process.env.REACT_APP_TRACKSHIP_APP_NAME || 'Workspace Shipping Dashboard';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n    console.log('App Name:', this.appName);\n  }\n  detectCarrier(trackingNumber) {\n    // Simple carrier detection based on tracking number format\n    if (trackingNumber.startsWith('1Z')) return 'ups';\n    if (trackingNumber.startsWith('940') || trackingNumber.startsWith('93')) return 'usps';\n    if (trackingNumber.startsWith('DHL') || trackingNumber.length === 10) return 'dhl';\n    if (trackingNumber.length === 12) return 'fedex';\n    return 'ups'; // Default to UPS\n  }\n  async createShipment(trackingNumber, orderId, postalCode) {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n    console.log('Creating shipment for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n    try {\n      const requestBody = {\n        tracking_number: trackingNumber,\n        tracking_provider: this.detectCarrier(trackingNumber),\n        order_id: orderId,\n        postal_code: postalCode || '00000',\n        destination_country: 'US',\n        app_name: this.appName\n      };\n      console.log('Request body:', requestBody);\n      console.log('Request URL:', `${this.baseUrl}/shipment/create/`);\n      const response = await fetch(`${this.baseUrl}/shipment/create/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'trackship-api-key': this.apiKey\n        },\n        body: JSON.stringify(requestBody)\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Trackship API error: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('API Response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n  parseStatus(status, description) {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (lowerStatus.includes('in_transit') || lowerStatus.includes('picked_up') || lowerDescription.includes('in transit') || lowerDescription.includes('picked up')) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n  async getTrackingStatus(trackingNumber, orderId, postalCode) {\n    try {\n      console.log('Getting tracking status for:', trackingNumber);\n\n      // First, create the shipment in Trackship\n      const orderIdToUse = orderId || `order_${Date.now()}`;\n      const createResponse = await this.createShipment(trackingNumber, orderIdToUse, postalCode);\n      console.log('Shipment creation response:', createResponse);\n      if (createResponse.status !== 'ok') {\n        throw new Error(`Failed to create shipment: ${createResponse.status_msg}`);\n      }\n\n      // For now, return mock data since we need to implement the tracking retrieval\n      // In a real implementation, you would make another API call to get the tracking details\n      const carrier = this.detectCarrier(trackingNumber);\n      const status = 'shipped'; // Mock status\n\n      const result = {\n        trackingNumber,\n        status: status,\n        lastActivity: new Date().toISOString(),\n        estimatedDelivery: '2024-01-20',\n        currentLocation: 'Distribution Center',\n        statusDescription: 'Package in transit',\n        carrier: carrier.toUpperCase()\n      };\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending',\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable'\n        };\n      }\n    });\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock different statuses and carriers based on tracking number\n    const mockData = {\n      'UPS123456789': {\n        status: 'pending',\n        carrier: 'UPS'\n      },\n      'FEDEX987654321': {\n        status: 'shipped',\n        carrier: 'FedEx'\n      },\n      'USPS555666777': {\n        status: 'delivered',\n        carrier: 'USPS'\n      },\n      'DHL888999000': {\n        status: 'shipped',\n        carrier: 'DHL'\n      },\n      '1Z999AA1234567890': {\n        status: 'shipped',\n        carrier: 'UPS'\n      },\n      '9400100000000000000000': {\n        status: 'delivered',\n        carrier: 'USPS'\n      }\n    };\n    const mockInfo = mockData[trackingNumber] || {\n      status: 'pending',\n      carrier: 'Unknown'\n    };\n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully'\n    };\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier\n    };\n  }\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(trackingNumber => this.getTrackingStatus(trackingNumber));\n    return Promise.all(promises);\n  }\n}\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  const useProxy = process.env.REACT_APP_USE_PROXY_API === 'true';\n  const isProduction = window.location.hostname !== 'localhost';\n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    useProxy,\n    isProduction,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  if (isProduction && useProxy) {\n    console.log('Using Netlify API service for production');\n    const {\n      netlifyApiService\n    } = require('./netlifyApi');\n    return netlifyApiService;\n  }\n  if (useProxy) {\n    console.log('Using proxy API service');\n    const {\n      proxyApiService\n    } = require('./proxyApi');\n    return proxyApiService;\n  }\n  if (useRealApi && hasCredentials) {\n    console.log('Using real Trackship API (may have CORS issues)');\n    return trackshipApiService;\n  }\n  console.log('Using mock Trackship API');\n  return mockTrackshipApiService;\n};","map":{"version":3,"names":["TrackshipApiService","constructor","baseUrl","apiKey","appName","process","env","REACT_APP_TRACKSHIP_API_KEY","REACT_APP_TRACKSHIP_APP_NAME","console","log","detectCarrier","trackingNumber","startsWith","length","createShipment","orderId","postalCode","Error","substring","requestBody","tracking_number","tracking_provider","order_id","postal_code","destination_country","app_name","response","fetch","method","headers","body","JSON","stringify","status","Object","fromEntries","entries","ok","errorText","text","error","data","json","parseStatus","description","lowerStatus","toLowerCase","lowerDescription","includes","getTrackingStatus","orderIdToUse","Date","now","createResponse","status_msg","carrier","result","lastActivity","toISOString","estimatedDelivery","currentLocation","statusDescription","toUpperCase","getBatchTrackingStatus","trackingNumbers","promises","map","index","Promise","all","trackshipApiService","MockTrackshipApiService","resolve","setTimeout","mockData","mockInfo","statusDescriptions","pending","shipped","delivered","undefined","mockTrackshipApiService","getTrackingService","useRealApi","REACT_APP_USE_REAL_TRACKSHIP_API","hasCredentials","useProxy","REACT_APP_USE_PROXY_API","isProduction","window","location","hostname","netlifyApiService","require","proxyApiService"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/trackshipApi.ts"],"sourcesContent":["// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.com/ for API access\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nexport interface TrackshipCreateResponse {\n  status: string;\n  status_msg: string;\n  trackers_balance: string;\n  user_plan: string;\n}\n\nexport interface TrackshipTrackingResponse {\n  status: string;\n  status_msg: string;\n  data?: {\n    tracking_number: string;\n    carrier: string;\n    status: string;\n    status_description: string;\n    estimated_delivery?: string;\n    events: Array<{\n      status: string;\n      status_description: string;\n      location?: string;\n      timestamp: string;\n    }>;\n  };\n}\n\nclass TrackshipApiService {\n  private baseUrl = 'https://api.trackship.com/v1';\n  private apiKey: string;\n  private appName: string;\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    this.appName = process.env.REACT_APP_TRACKSHIP_APP_NAME || 'Workspace Shipping Dashboard';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n    console.log('App Name:', this.appName);\n  }\n\n  private detectCarrier(trackingNumber: string): string {\n    // Simple carrier detection based on tracking number format\n    if (trackingNumber.startsWith('1Z')) return 'ups';\n    if (trackingNumber.startsWith('940') || trackingNumber.startsWith('93')) return 'usps';\n    if (trackingNumber.startsWith('DHL') || trackingNumber.length === 10) return 'dhl';\n    if (trackingNumber.length === 12) return 'fedex';\n    return 'ups'; // Default to UPS\n  }\n\n  private async createShipment(trackingNumber: string, orderId: string, postalCode?: string): Promise<TrackshipCreateResponse> {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n\n    console.log('Creating shipment for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n\n    try {\n      const requestBody = {\n        tracking_number: trackingNumber,\n        tracking_provider: this.detectCarrier(trackingNumber),\n        order_id: orderId,\n        postal_code: postalCode || '00000',\n        destination_country: 'US',\n        app_name: this.appName\n      };\n\n      console.log('Request body:', requestBody);\n      console.log('Request URL:', `${this.baseUrl}/shipment/create/`);\n\n      const response = await fetch(`${this.baseUrl}/shipment/create/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'trackship-api-key': this.apiKey,\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Trackship API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response data:', data);\n      return data as TrackshipCreateResponse;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n\n  private parseStatus(status: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (\n      lowerStatus.includes('in_transit') || \n      lowerStatus.includes('picked_up') || \n      lowerDescription.includes('in transit') ||\n      lowerDescription.includes('picked up')\n    ) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Getting tracking status for:', trackingNumber);\n      \n      // First, create the shipment in Trackship\n      const orderIdToUse = orderId || `order_${Date.now()}`;\n      const createResponse = await this.createShipment(trackingNumber, orderIdToUse, postalCode);\n      \n      console.log('Shipment creation response:', createResponse);\n      \n      if (createResponse.status !== 'ok') {\n        throw new Error(`Failed to create shipment: ${createResponse.status_msg}`);\n      }\n\n      // For now, return mock data since we need to implement the tracking retrieval\n      // In a real implementation, you would make another API call to get the tracking details\n      const carrier = this.detectCarrier(trackingNumber);\n      const status = 'shipped'; // Mock status\n      \n             const result = {\n         trackingNumber,\n         status: status as 'pending' | 'shipped' | 'delivered',\n         lastActivity: new Date().toISOString(),\n         estimatedDelivery: '2024-01-20',\n         currentLocation: 'Distribution Center',\n         statusDescription: 'Package in transit',\n         carrier: carrier.toUpperCase(),\n       };\n\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses and carriers based on tracking number\n    const mockData: Record<string, { status: 'pending' | 'shipped' | 'delivered', carrier: string }> = {\n      'UPS123456789': { status: 'pending', carrier: 'UPS' },\n      'FEDEX987654321': { status: 'shipped', carrier: 'FedEx' },\n      'USPS555666777': { status: 'delivered', carrier: 'USPS' },\n      'DHL888999000': { status: 'shipped', carrier: 'DHL' },\n      '1Z999AA1234567890': { status: 'shipped', carrier: 'UPS' },\n      '9400100000000000000000': { status: 'delivered', carrier: 'USPS' },\n    };\n\n    const mockInfo = mockData[trackingNumber] || { status: 'pending', carrier: 'Unknown' };\n    \n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully',\n    };\n\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  const useProxy = process.env.REACT_APP_USE_PROXY_API === 'true';\n  const isProduction = window.location.hostname !== 'localhost';\n  \n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    useProxy,\n    isProduction,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  \n  if (isProduction && useProxy) {\n    console.log('Using Netlify API service for production');\n    const { netlifyApiService } = require('./netlifyApi');\n    return netlifyApiService;\n  }\n  \n  if (useProxy) {\n    console.log('Using proxy API service');\n    const { proxyApiService } = require('./proxyApi');\n    return proxyApiService;\n  }\n  \n  if (useRealApi && hasCredentials) {\n    console.log('Using real Trackship API (may have CORS issues)');\n    return trackshipApiService;\n  }\n  \n  console.log('Using mock Trackship API');\n  return mockTrackshipApiService;\n}; "],"mappings":"AAAA;AACA;;AAqCA,MAAMA,mBAAmB,CAAC;EAKxBC,WAAWA,CAAA,EAAG;IAAA,KAJNC,OAAO,GAAG,8BAA8B;IAAA,KACxCC,MAAM;IAAA,KACNC,OAAO;IAGb,IAAI,CAACD,MAAM,GAAGE,OAAO,CAACC,GAAG,CAACC,2BAA2B,IAAI,EAAE;IAC3D,IAAI,CAACH,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACE,4BAA4B,IAAI,8BAA8B;IACzFC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE,IAAI,CAACP,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC;IACxEM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAACN,OAAO,CAAC;EACxC;EAEQO,aAAaA,CAACC,cAAsB,EAAU;IACpD;IACA,IAAIA,cAAc,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK;IACjD,IAAID,cAAc,CAACC,UAAU,CAAC,KAAK,CAAC,IAAID,cAAc,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE,OAAO,MAAM;IACtF,IAAID,cAAc,CAACC,UAAU,CAAC,KAAK,CAAC,IAAID,cAAc,CAACE,MAAM,KAAK,EAAE,EAAE,OAAO,KAAK;IAClF,IAAIF,cAAc,CAACE,MAAM,KAAK,EAAE,EAAE,OAAO,OAAO;IAChD,OAAO,KAAK,CAAC,CAAC;EAChB;EAEA,MAAcC,cAAcA,CAACH,cAAsB,EAAEI,OAAe,EAAEC,UAAmB,EAAoC;IAC3H,IAAI,CAAC,IAAI,CAACd,MAAM,EAAE;MAChB,MAAM,IAAIe,KAAK,CAAC,kCAAkC,CAAC;IACrD;IAEAT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,cAAc,CAAC;IACrDH,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACP,MAAM,CAACgB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;IAE7D,IAAI;MACF,MAAMC,WAAW,GAAG;QAClBC,eAAe,EAAET,cAAc;QAC/BU,iBAAiB,EAAE,IAAI,CAACX,aAAa,CAACC,cAAc,CAAC;QACrDW,QAAQ,EAAEP,OAAO;QACjBQ,WAAW,EAAEP,UAAU,IAAI,OAAO;QAClCQ,mBAAmB,EAAE,IAAI;QACzBC,QAAQ,EAAE,IAAI,CAACtB;MACjB,CAAC;MAEDK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEU,WAAW,CAAC;MACzCX,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,GAAG,IAAI,CAACR,OAAO,mBAAmB,CAAC;MAE/D,MAAMyB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAAC1B,OAAO,mBAAmB,EAAE;QAC/D2B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,mBAAmB,EAAE,IAAI,CAAC3B;QAC5B,CAAC;QACD4B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,WAAW;MAClC,CAAC,CAAC;MAEFX,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiB,QAAQ,CAACO,MAAM,CAAC;MAChDzB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEyB,MAAM,CAACC,WAAW,CAACT,QAAQ,CAACG,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC;MAEhF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;QACvC/B,OAAO,CAACgC,KAAK,CAAC,qBAAqB,EAAEF,SAAS,CAAC;QAC/C,MAAM,IAAIrB,KAAK,CAAC,wBAAwBS,QAAQ,CAACO,MAAM,MAAMK,SAAS,EAAE,CAAC;MAC3E;MAEA,MAAMG,IAAI,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;MAClClC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEgC,IAAI,CAAC;MACvC,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdhC,OAAO,CAACgC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;EAEQG,WAAWA,CAACV,MAAc,EAAEW,WAAmB,EAAuC;IAC5F,MAAMC,WAAW,GAAGZ,MAAM,CAACa,WAAW,CAAC,CAAC;IACxC,MAAMC,gBAAgB,GAAGH,WAAW,CAACE,WAAW,CAAC,CAAC;IAElD,IAAID,WAAW,CAACG,QAAQ,CAAC,WAAW,CAAC,IAAID,gBAAgB,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC/E,OAAO,WAAW;IACpB,CAAC,MAAM,IACLH,WAAW,CAACG,QAAQ,CAAC,YAAY,CAAC,IAClCH,WAAW,CAACG,QAAQ,CAAC,WAAW,CAAC,IACjCD,gBAAgB,CAACC,QAAQ,CAAC,YAAY,CAAC,IACvCD,gBAAgB,CAACC,QAAQ,CAAC,WAAW,CAAC,EACtC;MACA,OAAO,SAAS;IAClB,CAAC,MAAM;MACL,OAAO,SAAS;IAClB;EACF;EAEA,MAAMC,iBAAiBA,CAACtC,cAAsB,EAAEI,OAAgB,EAAEC,UAAmB,EAA2B;IAC9G,IAAI;MACFR,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,cAAc,CAAC;;MAE3D;MACA,MAAMuC,YAAY,GAAGnC,OAAO,IAAI,SAASoC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACrD,MAAMC,cAAc,GAAG,MAAM,IAAI,CAACvC,cAAc,CAACH,cAAc,EAAEuC,YAAY,EAAElC,UAAU,CAAC;MAE1FR,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE4C,cAAc,CAAC;MAE1D,IAAIA,cAAc,CAACpB,MAAM,KAAK,IAAI,EAAE;QAClC,MAAM,IAAIhB,KAAK,CAAC,8BAA8BoC,cAAc,CAACC,UAAU,EAAE,CAAC;MAC5E;;MAEA;MACA;MACA,MAAMC,OAAO,GAAG,IAAI,CAAC7C,aAAa,CAACC,cAAc,CAAC;MAClD,MAAMsB,MAAM,GAAG,SAAS,CAAC,CAAC;;MAEnB,MAAMuB,MAAM,GAAG;QACnB7C,cAAc;QACdsB,MAAM,EAAEA,MAA6C;QACrDwB,YAAY,EAAE,IAAIN,IAAI,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;QACtCC,iBAAiB,EAAE,YAAY;QAC/BC,eAAe,EAAE,qBAAqB;QACtCC,iBAAiB,EAAE,oBAAoB;QACvCN,OAAO,EAAEA,OAAO,CAACO,WAAW,CAAC;MAC/B,CAAC;MAEFtD,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE+C,MAAM,CAAC;MAC9C,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdhC,OAAO,CAACgC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMuB,sBAAsBA,CAACC,eAAyB,EAA6B;IACjF,MAAMC,QAAQ,GAAGD,eAAe,CAACE,GAAG,CAAC,OAAOvD,cAAc,EAAEwD,KAAK,KAAK;MACpE,IAAI;QACF,OAAO,MAAM,IAAI,CAAClB,iBAAiB,CAACtC,cAAc,EAAE,SAASwD,KAAK,EAAE,CAAC;MACvE,CAAC,CAAC,OAAO3B,KAAK,EAAE;QACdhC,OAAO,CAACgC,KAAK,CAAC,mBAAmB7B,cAAc,GAAG,EAAE6B,KAAK,CAAC;QAC1D,OAAO;UACL7B,cAAc;UACdsB,MAAM,EAAE,SAAkB;UAC1BwB,YAAY,EAAE,EAAE;UAChBI,iBAAiB,EAAE;QACrB,CAAC;MACH;IACF,CAAC,CAAC;IAEF,OAAOO,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAC9B;AACF;;AAEA;AACA,OAAO,MAAMK,mBAAmB,GAAG,IAAIvE,mBAAmB,CAAC,CAAC;;AAE5D;AACA,OAAO,MAAMwE,uBAAuB,CAAC;EACnC,MAAMtB,iBAAiBA,CAACtC,cAAsB,EAA2B;IACvE;IACA,MAAM,IAAIyD,OAAO,CAACI,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,MAAME,QAA0F,GAAG;MACjG,cAAc,EAAE;QAAEzC,MAAM,EAAE,SAAS;QAAEsB,OAAO,EAAE;MAAM,CAAC;MACrD,gBAAgB,EAAE;QAAEtB,MAAM,EAAE,SAAS;QAAEsB,OAAO,EAAE;MAAQ,CAAC;MACzD,eAAe,EAAE;QAAEtB,MAAM,EAAE,WAAW;QAAEsB,OAAO,EAAE;MAAO,CAAC;MACzD,cAAc,EAAE;QAAEtB,MAAM,EAAE,SAAS;QAAEsB,OAAO,EAAE;MAAM,CAAC;MACrD,mBAAmB,EAAE;QAAEtB,MAAM,EAAE,SAAS;QAAEsB,OAAO,EAAE;MAAM,CAAC;MAC1D,wBAAwB,EAAE;QAAEtB,MAAM,EAAE,WAAW;QAAEsB,OAAO,EAAE;MAAO;IACnE,CAAC;IAED,MAAMoB,QAAQ,GAAGD,QAAQ,CAAC/D,cAAc,CAAC,IAAI;MAAEsB,MAAM,EAAE,SAAS;MAAEsB,OAAO,EAAE;IAAU,CAAC;IAEtF,MAAMqB,kBAAkB,GAAG;MACzBC,OAAO,EAAE,qCAAqC;MAC9CC,OAAO,EAAE,oBAAoB;MAC7BC,SAAS,EAAE;IACb,CAAC;IAED,OAAO;MACLpE,cAAc;MACdsB,MAAM,EAAE0C,QAAQ,CAAC1C,MAAM;MACvBwB,YAAY,EAAE,IAAIN,IAAI,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;MACtCC,iBAAiB,EAAEgB,QAAQ,CAAC1C,MAAM,KAAK,SAAS,GAAG,YAAY,GAAG+C,SAAS;MAC3EpB,eAAe,EAAEe,QAAQ,CAAC1C,MAAM,KAAK,SAAS,GAAG,qBAAqB,GAAG+C,SAAS;MAClFnB,iBAAiB,EAAEe,kBAAkB,CAACD,QAAQ,CAAC1C,MAAM,CAAC;MACtDsB,OAAO,EAAEoB,QAAQ,CAACpB;IACpB,CAAC;EACH;EAEA,MAAMQ,sBAAsBA,CAACC,eAAyB,EAA6B;IACjF,MAAMC,QAAQ,GAAGD,eAAe,CAACE,GAAG,CAACvD,cAAc,IACjD,IAAI,CAACsC,iBAAiB,CAACtC,cAAc,CACvC,CAAC;IACD,OAAOyD,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAC9B;AACF;AAEA,OAAO,MAAMgB,uBAAuB,GAAG,IAAIV,uBAAuB,CAAC,CAAC;;AAEpE;AACA,OAAO,MAAMW,kBAAkB,GAAGA,CAAA,KAAM;EACtC,MAAMC,UAAU,GAAG/E,OAAO,CAACC,GAAG,CAAC+E,gCAAgC,KAAK,MAAM;EAC1E,MAAMC,cAAc,GAAGjF,OAAO,CAACC,GAAG,CAACC,2BAA2B;EAC9D,MAAMgF,QAAQ,GAAGlF,OAAO,CAACC,GAAG,CAACkF,uBAAuB,KAAK,MAAM;EAC/D,MAAMC,YAAY,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW;EAE7DnF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;IAChC0E,UAAU;IACVE,cAAc,EAAE,CAAC,CAACA,cAAc;IAChCC,QAAQ;IACRE,YAAY;IACZtF,MAAM,EAAEmF,cAAc,GAAGA,cAAc,CAACnE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG;EACrE,CAAC,CAAC;EAEF,IAAIsE,YAAY,IAAIF,QAAQ,EAAE;IAC5B9E,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,MAAM;MAAEmF;IAAkB,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;IACrD,OAAOD,iBAAiB;EAC1B;EAEA,IAAIN,QAAQ,EAAE;IACZ9E,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAM;MAAEqF;IAAgB,CAAC,GAAGD,OAAO,CAAC,YAAY,CAAC;IACjD,OAAOC,eAAe;EACxB;EAEA,IAAIX,UAAU,IAAIE,cAAc,EAAE;IAChC7E,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAC9D,OAAO6D,mBAAmB;EAC5B;EAEA9D,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACvC,OAAOwE,uBAAuB;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}