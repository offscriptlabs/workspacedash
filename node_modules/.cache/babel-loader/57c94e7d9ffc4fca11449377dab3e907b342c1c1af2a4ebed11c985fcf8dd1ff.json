{"ast":null,"code":"// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.com/ for API access\nclass TrackshipApiService{constructor(){this.baseUrl='https://api.trackship.com/v1';this.apiKey=void 0;this.appName=void 0;this.apiKey=process.env.REACT_APP_TRACKSHIP_API_KEY||'';this.appName=process.env.REACT_APP_TRACKSHIP_APP_NAME||'Workspace Shipping Dashboard';console.log('Trackship API Key configured:',this.apiKey?'Yes':'No');console.log('App Name:',this.appName);}detectCarrier(trackingNumber){// Simple carrier detection based on tracking number format\nif(trackingNumber.startsWith('1Z'))return'ups';if(trackingNumber.startsWith('940')||trackingNumber.startsWith('93'))return'usps';if(trackingNumber.startsWith('DHL')||trackingNumber.length===10)return'dhl';if(trackingNumber.length===12)return'fedex';return'ups';// Default to UPS\n}async createShipment(trackingNumber,orderId,postalCode){if(!this.apiKey){throw new Error('Trackship API key not configured');}console.log('Creating shipment for:',trackingNumber);console.log('API Key:',this.apiKey.substring(0,10)+'...');try{const requestBody={tracking_number:trackingNumber,tracking_provider:this.detectCarrier(trackingNumber),order_id:orderId,postal_code:postalCode||'00000',destination_country:'US',app_name:this.appName};console.log('Request body:',requestBody);console.log('Request URL:',`${this.baseUrl}/shipment/create/`);const response=await fetch(`${this.baseUrl}/shipment/create/`,{method:'POST',headers:{'Content-Type':'application/json','trackship-api-key':this.apiKey},body:JSON.stringify(requestBody)});console.log('Response status:',response.status);console.log('Response headers:',Object.fromEntries(response.headers.entries()));if(!response.ok){const errorText=await response.text();console.error('API Error Response:',errorText);throw new Error(`Trackship API error: ${response.status} - ${errorText}`);}const data=await response.json();console.log('API Response data:',data);return data;}catch(error){console.error('Trackship API request failed:',error);throw error;}}parseStatus(status,description){const lowerStatus=status.toLowerCase();const lowerDescription=description.toLowerCase();if(lowerStatus.includes('delivered')||lowerDescription.includes('delivered')){return'delivered';}else if(lowerStatus.includes('in_transit')||lowerStatus.includes('picked_up')||lowerDescription.includes('in transit')||lowerDescription.includes('picked up')){return'shipped';}else{return'pending';}}async getTrackingStatus(trackingNumber,orderId,postalCode){try{console.log('Getting tracking status for:',trackingNumber);// First, create the shipment in Trackship\nconst orderIdToUse=orderId||`order_${Date.now()}`;const createResponse=await this.createShipment(trackingNumber,orderIdToUse,postalCode);console.log('Shipment creation response:',createResponse);if(createResponse.status!=='ok'){throw new Error(`Failed to create shipment: ${createResponse.status_msg}`);}// For now, return mock data since we need to implement the tracking retrieval\n// In a real implementation, you would make another API call to get the tracking details\nconst carrier=this.detectCarrier(trackingNumber);const status='shipped';// Mock status\nconst result={trackingNumber,status:status,lastActivity:new Date().toISOString(),estimatedDelivery:'2024-01-20',currentLocation:'Distribution Center',statusDescription:'Package in transit',carrier:carrier.toUpperCase()};console.log('Parsed tracking result:',result);return result;}catch(error){console.error('Failed to get tracking status:',error);throw error;}}// Batch tracking for multiple orders\nasync getBatchTrackingStatus(trackingNumbers){const promises=trackingNumbers.map(async(trackingNumber,index)=>{try{return await this.getTrackingStatus(trackingNumber,`batch_${index}`);}catch(error){console.error(`Failed to track ${trackingNumber}:`,error);return{trackingNumber,status:'pending',lastActivity:'',statusDescription:'Tracking unavailable'};}});return Promise.all(promises);}}// Create singleton instance\nexport const trackshipApiService=new TrackshipApiService();// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService{async getTrackingStatus(trackingNumber){// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Mock different statuses and carriers based on tracking number\nconst mockData={'UPS123456789':{status:'pending',carrier:'UPS'},'FEDEX987654321':{status:'shipped',carrier:'FedEx'},'USPS555666777':{status:'delivered',carrier:'USPS'},'DHL888999000':{status:'shipped',carrier:'DHL'},'1Z999AA1234567890':{status:'shipped',carrier:'UPS'},'9400100000000000000000':{status:'delivered',carrier:'USPS'}};const mockInfo=mockData[trackingNumber]||{status:'pending',carrier:'Unknown'};const statusDescriptions={pending:'Package information sent to carrier',shipped:'Package in transit',delivered:'Package delivered successfully'};return{trackingNumber,status:mockInfo.status,lastActivity:new Date().toISOString(),estimatedDelivery:mockInfo.status==='pending'?'2024-01-20':undefined,currentLocation:mockInfo.status==='shipped'?'Distribution Center':undefined,statusDescription:statusDescriptions[mockInfo.status],carrier:mockInfo.carrier};}async getBatchTrackingStatus(trackingNumbers){const promises=trackingNumbers.map(trackingNumber=>this.getTrackingStatus(trackingNumber));return Promise.all(promises);}}export const mockTrackshipApiService=new MockTrackshipApiService();// Helper function to get the appropriate service based on environment\nexport const getTrackingService=()=>{const useRealApi=process.env.REACT_APP_USE_REAL_TRACKSHIP_API==='true';const hasCredentials=process.env.REACT_APP_TRACKSHIP_API_KEY;const useProxy=process.env.REACT_APP_USE_PROXY_API==='true';const isProduction=window.location.hostname!=='localhost';console.log('Environment check:',{useRealApi,hasCredentials:!!hasCredentials,useProxy,isProduction,apiKey:hasCredentials?hasCredentials.substring(0,10)+'...':'None'});if(isProduction&&useProxy){console.log('Using Netlify API service for production');const{netlifyApiService}=require('./netlifyApi');return netlifyApiService;}if(useProxy){console.log('Using proxy API service');const{proxyApiService}=require('./proxyApi');return proxyApiService;}if(useRealApi&&hasCredentials){console.log('Using real Trackship API (may have CORS issues)');return trackshipApiService;}console.log('Using mock Trackship API');return mockTrackshipApiService;};","map":{"version":3,"names":["TrackshipApiService","constructor","baseUrl","apiKey","appName","process","env","REACT_APP_TRACKSHIP_API_KEY","REACT_APP_TRACKSHIP_APP_NAME","console","log","detectCarrier","trackingNumber","startsWith","length","createShipment","orderId","postalCode","Error","substring","requestBody","tracking_number","tracking_provider","order_id","postal_code","destination_country","app_name","response","fetch","method","headers","body","JSON","stringify","status","Object","fromEntries","entries","ok","errorText","text","error","data","json","parseStatus","description","lowerStatus","toLowerCase","lowerDescription","includes","getTrackingStatus","orderIdToUse","Date","now","createResponse","status_msg","carrier","result","lastActivity","toISOString","estimatedDelivery","currentLocation","statusDescription","toUpperCase","getBatchTrackingStatus","trackingNumbers","promises","map","index","Promise","all","trackshipApiService","MockTrackshipApiService","resolve","setTimeout","mockData","mockInfo","statusDescriptions","pending","shipped","delivered","undefined","mockTrackshipApiService","getTrackingService","useRealApi","REACT_APP_USE_REAL_TRACKSHIP_API","hasCredentials","useProxy","REACT_APP_USE_PROXY_API","isProduction","window","location","hostname","netlifyApiService","require","proxyApiService"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/trackshipApi.ts"],"sourcesContent":["// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.com/ for API access\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nexport interface TrackshipCreateResponse {\n  status: string;\n  status_msg: string;\n  trackers_balance: string;\n  user_plan: string;\n}\n\nexport interface TrackshipTrackingResponse {\n  status: string;\n  status_msg: string;\n  data?: {\n    tracking_number: string;\n    carrier: string;\n    status: string;\n    status_description: string;\n    estimated_delivery?: string;\n    events: Array<{\n      status: string;\n      status_description: string;\n      location?: string;\n      timestamp: string;\n    }>;\n  };\n}\n\nclass TrackshipApiService {\n  private baseUrl = 'https://api.trackship.com/v1';\n  private apiKey: string;\n  private appName: string;\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    this.appName = process.env.REACT_APP_TRACKSHIP_APP_NAME || 'Workspace Shipping Dashboard';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n    console.log('App Name:', this.appName);\n  }\n\n  private detectCarrier(trackingNumber: string): string {\n    // Simple carrier detection based on tracking number format\n    if (trackingNumber.startsWith('1Z')) return 'ups';\n    if (trackingNumber.startsWith('940') || trackingNumber.startsWith('93')) return 'usps';\n    if (trackingNumber.startsWith('DHL') || trackingNumber.length === 10) return 'dhl';\n    if (trackingNumber.length === 12) return 'fedex';\n    return 'ups'; // Default to UPS\n  }\n\n  private async createShipment(trackingNumber: string, orderId: string, postalCode?: string): Promise<TrackshipCreateResponse> {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n\n    console.log('Creating shipment for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n\n    try {\n      const requestBody = {\n        tracking_number: trackingNumber,\n        tracking_provider: this.detectCarrier(trackingNumber),\n        order_id: orderId,\n        postal_code: postalCode || '00000',\n        destination_country: 'US',\n        app_name: this.appName\n      };\n\n      console.log('Request body:', requestBody);\n      console.log('Request URL:', `${this.baseUrl}/shipment/create/`);\n\n      const response = await fetch(`${this.baseUrl}/shipment/create/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'trackship-api-key': this.apiKey,\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Trackship API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response data:', data);\n      return data as TrackshipCreateResponse;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n\n  private parseStatus(status: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (\n      lowerStatus.includes('in_transit') || \n      lowerStatus.includes('picked_up') || \n      lowerDescription.includes('in transit') ||\n      lowerDescription.includes('picked up')\n    ) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Getting tracking status for:', trackingNumber);\n      \n      // First, create the shipment in Trackship\n      const orderIdToUse = orderId || `order_${Date.now()}`;\n      const createResponse = await this.createShipment(trackingNumber, orderIdToUse, postalCode);\n      \n      console.log('Shipment creation response:', createResponse);\n      \n      if (createResponse.status !== 'ok') {\n        throw new Error(`Failed to create shipment: ${createResponse.status_msg}`);\n      }\n\n      // For now, return mock data since we need to implement the tracking retrieval\n      // In a real implementation, you would make another API call to get the tracking details\n      const carrier = this.detectCarrier(trackingNumber);\n      const status = 'shipped'; // Mock status\n      \n             const result = {\n         trackingNumber,\n         status: status as 'pending' | 'shipped' | 'delivered',\n         lastActivity: new Date().toISOString(),\n         estimatedDelivery: '2024-01-20',\n         currentLocation: 'Distribution Center',\n         statusDescription: 'Package in transit',\n         carrier: carrier.toUpperCase(),\n       };\n\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses and carriers based on tracking number\n    const mockData: Record<string, { status: 'pending' | 'shipped' | 'delivered', carrier: string }> = {\n      'UPS123456789': { status: 'pending', carrier: 'UPS' },\n      'FEDEX987654321': { status: 'shipped', carrier: 'FedEx' },\n      'USPS555666777': { status: 'delivered', carrier: 'USPS' },\n      'DHL888999000': { status: 'shipped', carrier: 'DHL' },\n      '1Z999AA1234567890': { status: 'shipped', carrier: 'UPS' },\n      '9400100000000000000000': { status: 'delivered', carrier: 'USPS' },\n    };\n\n    const mockInfo = mockData[trackingNumber] || { status: 'pending', carrier: 'Unknown' };\n    \n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully',\n    };\n\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  const useProxy = process.env.REACT_APP_USE_PROXY_API === 'true';\n  const isProduction = window.location.hostname !== 'localhost';\n  \n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    useProxy,\n    isProduction,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  \n  if (isProduction && useProxy) {\n    console.log('Using Netlify API service for production');\n    const { netlifyApiService } = require('./netlifyApi');\n    return netlifyApiService;\n  }\n  \n  if (useProxy) {\n    console.log('Using proxy API service');\n    const { proxyApiService } = require('./proxyApi');\n    return proxyApiService;\n  }\n  \n  if (useRealApi && hasCredentials) {\n    console.log('Using real Trackship API (may have CORS issues)');\n    return trackshipApiService;\n  }\n  \n  console.log('Using mock Trackship API');\n  return mockTrackshipApiService;\n}; "],"mappings":"AAAA;AACA;AAqCA,KAAM,CAAAA,mBAAoB,CAKxBC,WAAWA,CAAA,CAAG,MAJNC,OAAO,CAAG,8BAA8B,MACxCC,MAAM,aACNC,OAAO,QAGb,IAAI,CAACD,MAAM,CAAGE,OAAO,CAACC,GAAG,CAACC,2BAA2B,EAAI,EAAE,CAC3D,IAAI,CAACH,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACE,4BAA4B,EAAI,8BAA8B,CACzFC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAE,IAAI,CAACP,MAAM,CAAG,KAAK,CAAG,IAAI,CAAC,CACxEM,OAAO,CAACC,GAAG,CAAC,WAAW,CAAE,IAAI,CAACN,OAAO,CAAC,CACxC,CAEQO,aAAaA,CAACC,cAAsB,CAAU,CACpD;AACA,GAAIA,cAAc,CAACC,UAAU,CAAC,IAAI,CAAC,CAAE,MAAO,KAAK,CACjD,GAAID,cAAc,CAACC,UAAU,CAAC,KAAK,CAAC,EAAID,cAAc,CAACC,UAAU,CAAC,IAAI,CAAC,CAAE,MAAO,MAAM,CACtF,GAAID,cAAc,CAACC,UAAU,CAAC,KAAK,CAAC,EAAID,cAAc,CAACE,MAAM,GAAK,EAAE,CAAE,MAAO,KAAK,CAClF,GAAIF,cAAc,CAACE,MAAM,GAAK,EAAE,CAAE,MAAO,OAAO,CAChD,MAAO,KAAK,CAAE;AAChB,CAEA,KAAc,CAAAC,cAAcA,CAACH,cAAsB,CAAEI,OAAe,CAAEC,UAAmB,CAAoC,CAC3H,GAAI,CAAC,IAAI,CAACd,MAAM,CAAE,CAChB,KAAM,IAAI,CAAAe,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEAT,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEE,cAAc,CAAC,CACrDH,OAAO,CAACC,GAAG,CAAC,UAAU,CAAE,IAAI,CAACP,MAAM,CAACgB,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CAAG,KAAK,CAAC,CAE7D,GAAI,CACF,KAAM,CAAAC,WAAW,CAAG,CAClBC,eAAe,CAAET,cAAc,CAC/BU,iBAAiB,CAAE,IAAI,CAACX,aAAa,CAACC,cAAc,CAAC,CACrDW,QAAQ,CAAEP,OAAO,CACjBQ,WAAW,CAAEP,UAAU,EAAI,OAAO,CAClCQ,mBAAmB,CAAE,IAAI,CACzBC,QAAQ,CAAE,IAAI,CAACtB,OACjB,CAAC,CAEDK,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEU,WAAW,CAAC,CACzCX,OAAO,CAACC,GAAG,CAAC,cAAc,CAAE,GAAG,IAAI,CAACR,OAAO,mBAAmB,CAAC,CAE/D,KAAM,CAAAyB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAG,IAAI,CAAC1B,OAAO,mBAAmB,CAAE,CAC/D2B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,mBAAmB,CAAE,IAAI,CAAC3B,MAC5B,CAAC,CACD4B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACb,WAAW,CAClC,CAAC,CAAC,CAEFX,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEiB,QAAQ,CAACO,MAAM,CAAC,CAChDzB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEyB,MAAM,CAACC,WAAW,CAACT,QAAQ,CAACG,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC,CAEhF,GAAI,CAACV,QAAQ,CAACW,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAZ,QAAQ,CAACa,IAAI,CAAC,CAAC,CACvC/B,OAAO,CAACgC,KAAK,CAAC,qBAAqB,CAAEF,SAAS,CAAC,CAC/C,KAAM,IAAI,CAAArB,KAAK,CAAC,wBAAwBS,QAAQ,CAACO,MAAM,MAAMK,SAAS,EAAE,CAAC,CAC3E,CAEA,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAf,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAClClC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEgC,IAAI,CAAC,CACvC,MAAO,CAAAA,IAAI,CACb,CAAE,MAAOD,KAAK,CAAE,CACdhC,OAAO,CAACgC,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACb,CACF,CAEQG,WAAWA,CAACV,MAAc,CAAEW,WAAmB,CAAuC,CAC5F,KAAM,CAAAC,WAAW,CAAGZ,MAAM,CAACa,WAAW,CAAC,CAAC,CACxC,KAAM,CAAAC,gBAAgB,CAAGH,WAAW,CAACE,WAAW,CAAC,CAAC,CAElD,GAAID,WAAW,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAID,gBAAgB,CAACC,QAAQ,CAAC,WAAW,CAAC,CAAE,CAC/E,MAAO,WAAW,CACpB,CAAC,IAAM,IACLH,WAAW,CAACG,QAAQ,CAAC,YAAY,CAAC,EAClCH,WAAW,CAACG,QAAQ,CAAC,WAAW,CAAC,EACjCD,gBAAgB,CAACC,QAAQ,CAAC,YAAY,CAAC,EACvCD,gBAAgB,CAACC,QAAQ,CAAC,WAAW,CAAC,CACtC,CACA,MAAO,SAAS,CAClB,CAAC,IAAM,CACL,MAAO,SAAS,CAClB,CACF,CAEA,KAAM,CAAAC,iBAAiBA,CAACtC,cAAsB,CAAEI,OAAgB,CAAEC,UAAmB,CAA2B,CAC9G,GAAI,CACFR,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEE,cAAc,CAAC,CAE3D;AACA,KAAM,CAAAuC,YAAY,CAAGnC,OAAO,EAAI,SAASoC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CACrD,KAAM,CAAAC,cAAc,CAAG,KAAM,KAAI,CAACvC,cAAc,CAACH,cAAc,CAAEuC,YAAY,CAAElC,UAAU,CAAC,CAE1FR,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAE4C,cAAc,CAAC,CAE1D,GAAIA,cAAc,CAACpB,MAAM,GAAK,IAAI,CAAE,CAClC,KAAM,IAAI,CAAAhB,KAAK,CAAC,8BAA8BoC,cAAc,CAACC,UAAU,EAAE,CAAC,CAC5E,CAEA;AACA;AACA,KAAM,CAAAC,OAAO,CAAG,IAAI,CAAC7C,aAAa,CAACC,cAAc,CAAC,CAClD,KAAM,CAAAsB,MAAM,CAAG,SAAS,CAAE;AAEnB,KAAM,CAAAuB,MAAM,CAAG,CACnB7C,cAAc,CACdsB,MAAM,CAAEA,MAA6C,CACrDwB,YAAY,CAAE,GAAI,CAAAN,IAAI,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC,CACtCC,iBAAiB,CAAE,YAAY,CAC/BC,eAAe,CAAE,qBAAqB,CACtCC,iBAAiB,CAAE,oBAAoB,CACvCN,OAAO,CAAEA,OAAO,CAACO,WAAW,CAAC,CAC/B,CAAC,CAEFtD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAE+C,MAAM,CAAC,CAC9C,MAAO,CAAAA,MAAM,CACf,CAAE,MAAOhB,KAAK,CAAE,CACdhC,OAAO,CAACgC,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAuB,sBAAsBA,CAACC,eAAyB,CAA6B,CACjF,KAAM,CAAAC,QAAQ,CAAGD,eAAe,CAACE,GAAG,CAAC,MAAOvD,cAAc,CAAEwD,KAAK,GAAK,CACpE,GAAI,CACF,MAAO,MAAM,KAAI,CAAClB,iBAAiB,CAACtC,cAAc,CAAE,SAASwD,KAAK,EAAE,CAAC,CACvE,CAAE,MAAO3B,KAAK,CAAE,CACdhC,OAAO,CAACgC,KAAK,CAAC,mBAAmB7B,cAAc,GAAG,CAAE6B,KAAK,CAAC,CAC1D,MAAO,CACL7B,cAAc,CACdsB,MAAM,CAAE,SAAkB,CAC1BwB,YAAY,CAAE,EAAE,CAChBI,iBAAiB,CAAE,sBACrB,CAAC,CACH,CACF,CAAC,CAAC,CAEF,MAAO,CAAAO,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC,CAC9B,CACF,CAEA;AACA,MAAO,MAAM,CAAAK,mBAAmB,CAAG,GAAI,CAAAvE,mBAAmB,CAAC,CAAC,CAE5D;AACA,MAAO,MAAM,CAAAwE,uBAAwB,CACnC,KAAM,CAAAtB,iBAAiBA,CAACtC,cAAsB,CAA2B,CACvE;AACA,KAAM,IAAI,CAAAyD,OAAO,CAACI,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,KAAM,CAAAE,QAA0F,CAAG,CACjG,cAAc,CAAE,CAAEzC,MAAM,CAAE,SAAS,CAAEsB,OAAO,CAAE,KAAM,CAAC,CACrD,gBAAgB,CAAE,CAAEtB,MAAM,CAAE,SAAS,CAAEsB,OAAO,CAAE,OAAQ,CAAC,CACzD,eAAe,CAAE,CAAEtB,MAAM,CAAE,WAAW,CAAEsB,OAAO,CAAE,MAAO,CAAC,CACzD,cAAc,CAAE,CAAEtB,MAAM,CAAE,SAAS,CAAEsB,OAAO,CAAE,KAAM,CAAC,CACrD,mBAAmB,CAAE,CAAEtB,MAAM,CAAE,SAAS,CAAEsB,OAAO,CAAE,KAAM,CAAC,CAC1D,wBAAwB,CAAE,CAAEtB,MAAM,CAAE,WAAW,CAAEsB,OAAO,CAAE,MAAO,CACnE,CAAC,CAED,KAAM,CAAAoB,QAAQ,CAAGD,QAAQ,CAAC/D,cAAc,CAAC,EAAI,CAAEsB,MAAM,CAAE,SAAS,CAAEsB,OAAO,CAAE,SAAU,CAAC,CAEtF,KAAM,CAAAqB,kBAAkB,CAAG,CACzBC,OAAO,CAAE,qCAAqC,CAC9CC,OAAO,CAAE,oBAAoB,CAC7BC,SAAS,CAAE,gCACb,CAAC,CAED,MAAO,CACLpE,cAAc,CACdsB,MAAM,CAAE0C,QAAQ,CAAC1C,MAAM,CACvBwB,YAAY,CAAE,GAAI,CAAAN,IAAI,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC,CACtCC,iBAAiB,CAAEgB,QAAQ,CAAC1C,MAAM,GAAK,SAAS,CAAG,YAAY,CAAG+C,SAAS,CAC3EpB,eAAe,CAAEe,QAAQ,CAAC1C,MAAM,GAAK,SAAS,CAAG,qBAAqB,CAAG+C,SAAS,CAClFnB,iBAAiB,CAAEe,kBAAkB,CAACD,QAAQ,CAAC1C,MAAM,CAAC,CACtDsB,OAAO,CAAEoB,QAAQ,CAACpB,OACpB,CAAC,CACH,CAEA,KAAM,CAAAQ,sBAAsBA,CAACC,eAAyB,CAA6B,CACjF,KAAM,CAAAC,QAAQ,CAAGD,eAAe,CAACE,GAAG,CAACvD,cAAc,EACjD,IAAI,CAACsC,iBAAiB,CAACtC,cAAc,CACvC,CAAC,CACD,MAAO,CAAAyD,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC,CAC9B,CACF,CAEA,MAAO,MAAM,CAAAgB,uBAAuB,CAAG,GAAI,CAAAV,uBAAuB,CAAC,CAAC,CAEpE;AACA,MAAO,MAAM,CAAAW,kBAAkB,CAAGA,CAAA,GAAM,CACtC,KAAM,CAAAC,UAAU,CAAG/E,OAAO,CAACC,GAAG,CAAC+E,gCAAgC,GAAK,MAAM,CAC1E,KAAM,CAAAC,cAAc,CAAGjF,OAAO,CAACC,GAAG,CAACC,2BAA2B,CAC9D,KAAM,CAAAgF,QAAQ,CAAGlF,OAAO,CAACC,GAAG,CAACkF,uBAAuB,GAAK,MAAM,CAC/D,KAAM,CAAAC,YAAY,CAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,WAAW,CAE7DnF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAE,CAChC0E,UAAU,CACVE,cAAc,CAAE,CAAC,CAACA,cAAc,CAChCC,QAAQ,CACRE,YAAY,CACZtF,MAAM,CAAEmF,cAAc,CAAGA,cAAc,CAACnE,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CAAG,KAAK,CAAG,MACrE,CAAC,CAAC,CAEF,GAAIsE,YAAY,EAAIF,QAAQ,CAAE,CAC5B9E,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CACvD,KAAM,CAAEmF,iBAAkB,CAAC,CAAGC,OAAO,CAAC,cAAc,CAAC,CACrD,MAAO,CAAAD,iBAAiB,CAC1B,CAEA,GAAIN,QAAQ,CAAE,CACZ9E,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtC,KAAM,CAAEqF,eAAgB,CAAC,CAAGD,OAAO,CAAC,YAAY,CAAC,CACjD,MAAO,CAAAC,eAAe,CACxB,CAEA,GAAIX,UAAU,EAAIE,cAAc,CAAE,CAChC7E,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC,CAC9D,MAAO,CAAA6D,mBAAmB,CAC5B,CAEA9D,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvC,MAAO,CAAAwE,uBAAuB,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}