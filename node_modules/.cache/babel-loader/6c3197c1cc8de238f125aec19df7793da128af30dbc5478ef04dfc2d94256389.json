{"ast":null,"code":"class NetlifyApiService{constructor(){this.baseUrl=void 0;// Use the current domain for Netlify functions\nthis.baseUrl=window.location.origin;}async getTrackingStatus(trackingNumber,orderId,postalCode){try{console.log('Making Netlify API request for:',trackingNumber);const response=await fetch(`${this.baseUrl}/.netlify/functions/tracking`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({trackingNumber,orderId:orderId||`order_${Date.now()}`,postalCode:postalCode||'00000'})});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();console.log('Netlify API response:',data);if(!data.success){throw new Error(data.error||'API request failed');}return data.data;}catch(error){console.error('Netlify API request failed:',error);throw error;}}async getBatchTrackingStatus(trackingNumbers){const promises=trackingNumbers.map(async(trackingNumber,index)=>{try{return await this.getTrackingStatus(trackingNumber,`batch_${index}`);}catch(error){console.error(`Failed to track ${trackingNumber}:`,error);return{trackingNumber,status:'pending',lastActivity:'',statusDescription:'Tracking unavailable'};}});return Promise.all(promises);}}export const netlifyApiService=new NetlifyApiService();","map":{"version":3,"names":["NetlifyApiService","constructor","baseUrl","window","location","origin","getTrackingStatus","trackingNumber","orderId","postalCode","console","log","response","fetch","method","headers","body","JSON","stringify","Date","now","ok","Error","status","data","json","success","error","getBatchTrackingStatus","trackingNumbers","promises","map","index","lastActivity","statusDescription","Promise","all","netlifyApiService"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/netlifyApi.ts"],"sourcesContent":["import { TrackingStatus } from './trackshipApi';\n\nclass NetlifyApiService {\n  private baseUrl: string;\n\n  constructor() {\n    // Use the current domain for Netlify functions\n    this.baseUrl = window.location.origin;\n  }\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Making Netlify API request for:', trackingNumber);\n      \n      const response = await fetch(`${this.baseUrl}/.netlify/functions/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId: orderId || `order_${Date.now()}`,\n          postalCode: postalCode || '00000'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Netlify API response:', data);\n\n      if (!data.success) {\n        throw new Error(data.error || 'API request failed');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Netlify API request failed:', error);\n      throw error;\n    }\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nexport const netlifyApiService = new NetlifyApiService(); "],"mappings":"AAEA,KAAM,CAAAA,iBAAkB,CAGtBC,WAAWA,CAAA,CAAG,MAFNC,OAAO,QAGb;AACA,IAAI,CAACA,OAAO,CAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,CACvC,CAEA,KAAM,CAAAC,iBAAiBA,CAACC,cAAsB,CAAEC,OAAgB,CAAEC,UAAmB,CAA2B,CAC9G,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAEJ,cAAc,CAAC,CAE9D,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,8BAA8B,CAAE,CAC1EY,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBX,cAAc,CACdC,OAAO,CAAEA,OAAO,EAAI,SAASW,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CACzCX,UAAU,CAAEA,UAAU,EAAI,OAC5B,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACG,QAAQ,CAACS,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,EAAE,CAAC,CAC3D,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAZ,QAAQ,CAACa,IAAI,CAAC,CAAC,CAClCf,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEa,IAAI,CAAC,CAE1C,GAAI,CAACA,IAAI,CAACE,OAAO,CAAE,CACjB,KAAM,IAAI,CAAAJ,KAAK,CAACE,IAAI,CAACG,KAAK,EAAI,oBAAoB,CAAC,CACrD,CAEA,MAAO,CAAAH,IAAI,CAACA,IAAI,CAClB,CAAE,MAAOG,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAAC,sBAAsBA,CAACC,eAAyB,CAA6B,CACjF,KAAM,CAAAC,QAAQ,CAAGD,eAAe,CAACE,GAAG,CAAC,MAAOxB,cAAc,CAAEyB,KAAK,GAAK,CACpE,GAAI,CACF,MAAO,MAAM,KAAI,CAAC1B,iBAAiB,CAACC,cAAc,CAAE,SAASyB,KAAK,EAAE,CAAC,CACvE,CAAE,MAAOL,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,mBAAmBpB,cAAc,GAAG,CAAEoB,KAAK,CAAC,CAC1D,MAAO,CACLpB,cAAc,CACdgB,MAAM,CAAE,SAAkB,CAC1BU,YAAY,CAAE,EAAE,CAChBC,iBAAiB,CAAE,sBACrB,CAAC,CACH,CACF,CAAC,CAAC,CAEF,MAAO,CAAAC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC,CAC9B,CACF,CAEA,MAAO,MAAM,CAAAO,iBAAiB,CAAG,GAAI,CAAArC,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}