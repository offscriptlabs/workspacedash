{"ast":null,"code":"// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.co/ for API access\n\nclass TrackshipApiService {\n  constructor() {\n    this.baseUrl = 'https://api.trackship.co/v1';\n    this.apiKey = void 0;\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n  }\n  async makeRequest(trackingNumber) {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n    try {\n      const response = await fetch(`${this.baseUrl}/track`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          tracking_number: trackingNumber\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Trackship API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n  parseStatus(status, description) {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (lowerStatus.includes('in_transit') || lowerStatus.includes('picked_up') || lowerDescription.includes('in transit') || lowerDescription.includes('picked up')) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n  async getTrackingStatus(trackingNumber) {\n    try {\n      var _data$events;\n      const response = await this.makeRequest(trackingNumber);\n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Failed to get tracking data');\n      }\n      const data = response.data;\n      const latestEvent = (_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events[0]; // Most recent event\n      const status = this.parseStatus(data.status, data.status_description);\n      return {\n        trackingNumber: data.tracking_number,\n        status,\n        lastActivity: (latestEvent === null || latestEvent === void 0 ? void 0 : latestEvent.timestamp) || '',\n        estimatedDelivery: data.estimated_delivery,\n        currentLocation: latestEvent === null || latestEvent === void 0 ? void 0 : latestEvent.location,\n        statusDescription: data.status_description,\n        carrier: data.carrier\n      };\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(async trackingNumber => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending',\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable'\n        };\n      }\n    });\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock different statuses and carriers based on tracking number\n    const mockData = {\n      'UPS123456789': {\n        status: 'pending',\n        carrier: 'UPS'\n      },\n      'FEDEX987654321': {\n        status: 'shipped',\n        carrier: 'FedEx'\n      },\n      'USPS555666777': {\n        status: 'delivered',\n        carrier: 'USPS'\n      },\n      'DHL888999000': {\n        status: 'shipped',\n        carrier: 'DHL'\n      },\n      '1Z999AA1234567890': {\n        status: 'shipped',\n        carrier: 'UPS'\n      },\n      '9400100000000000000000': {\n        status: 'delivered',\n        carrier: 'USPS'\n      }\n    };\n    const mockInfo = mockData[trackingNumber] || {\n      status: 'pending',\n      carrier: 'Unknown'\n    };\n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully'\n    };\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier\n    };\n  }\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(trackingNumber => this.getTrackingStatus(trackingNumber));\n    return Promise.all(promises);\n  }\n}\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  if (useRealApi && hasCredentials) {\n    return trackshipApiService;\n  }\n  return mockTrackshipApiService;\n};","map":{"version":3,"names":["TrackshipApiService","constructor","baseUrl","apiKey","process","env","REACT_APP_TRACKSHIP_API_KEY","makeRequest","trackingNumber","Error","response","fetch","method","headers","body","JSON","stringify","tracking_number","ok","status","data","json","error","console","parseStatus","description","lowerStatus","toLowerCase","lowerDescription","includes","getTrackingStatus","_data$events","success","latestEvent","events","status_description","lastActivity","timestamp","estimatedDelivery","estimated_delivery","currentLocation","location","statusDescription","carrier","getBatchTrackingStatus","trackingNumbers","promises","map","Promise","all","trackshipApiService","MockTrackshipApiService","resolve","setTimeout","mockData","mockInfo","statusDescriptions","pending","shipped","delivered","Date","toISOString","undefined","mockTrackshipApiService","getTrackingService","useRealApi","REACT_APP_USE_REAL_TRACKSHIP_API","hasCredentials"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/trackshipApi.ts"],"sourcesContent":["// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.co/ for API access\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nexport interface TrackshipResponse {\n  success: boolean;\n  data?: {\n    tracking_number: string;\n    carrier: string;\n    status: string;\n    status_description: string;\n    estimated_delivery?: string;\n    events: Array<{\n      status: string;\n      status_description: string;\n      location?: string;\n      timestamp: string;\n    }>;\n  };\n  error?: string;\n}\n\nclass TrackshipApiService {\n  private baseUrl = 'https://api.trackship.co/v1';\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n  }\n\n  private async makeRequest(trackingNumber: string): Promise<TrackshipResponse> {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/track`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify({\n          tracking_number: trackingNumber,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Trackship API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data as TrackshipResponse;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n\n  private parseStatus(status: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (\n      lowerStatus.includes('in_transit') || \n      lowerStatus.includes('picked_up') || \n      lowerDescription.includes('in transit') ||\n      lowerDescription.includes('picked up')\n    ) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    try {\n      const response = await this.makeRequest(trackingNumber);\n      \n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Failed to get tracking data');\n      }\n\n      const data = response.data;\n      const latestEvent = data.events?.[0]; // Most recent event\n      const status = this.parseStatus(data.status, data.status_description);\n\n      return {\n        trackingNumber: data.tracking_number,\n        status,\n        lastActivity: latestEvent?.timestamp || '',\n        estimatedDelivery: data.estimated_delivery,\n        currentLocation: latestEvent?.location,\n        statusDescription: data.status_description,\n        carrier: data.carrier,\n      };\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses and carriers based on tracking number\n    const mockData: Record<string, { status: 'pending' | 'shipped' | 'delivered', carrier: string }> = {\n      'UPS123456789': { status: 'pending', carrier: 'UPS' },\n      'FEDEX987654321': { status: 'shipped', carrier: 'FedEx' },\n      'USPS555666777': { status: 'delivered', carrier: 'USPS' },\n      'DHL888999000': { status: 'shipped', carrier: 'DHL' },\n      '1Z999AA1234567890': { status: 'shipped', carrier: 'UPS' },\n      '9400100000000000000000': { status: 'delivered', carrier: 'USPS' },\n    };\n\n    const mockInfo = mockData[trackingNumber] || { status: 'pending', carrier: 'Unknown' };\n    \n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully',\n    };\n\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  \n  if (useRealApi && hasCredentials) {\n    return trackshipApiService;\n  }\n  \n  return mockTrackshipApiService;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}