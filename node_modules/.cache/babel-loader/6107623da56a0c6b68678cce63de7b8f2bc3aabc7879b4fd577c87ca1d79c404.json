{"ast":null,"code":"// UPS API Service for tracking information\n// Note: You'll need to sign up for UPS API access at https://developer.ups.com/\n\nclass UPSApiService {\n  constructor() {\n    this.baseUrl = 'https://onlinetools.ups.com/rest/Track';\n    this.accessKey = void 0;\n    this.username = void 0;\n    this.password = void 0;\n    // These should be stored in environment variables\n    this.accessKey = process.env.REACT_APP_UPS_ACCESS_KEY || '';\n    this.username = process.env.REACT_APP_UPS_USERNAME || '';\n    this.password = process.env.REACT_APP_UPS_PASSWORD || '';\n  }\n  async makeRequest(trackingNumber) {\n    const requestBody = {\n      UPSSecurity: {\n        UsernameToken: {\n          Username: this.username,\n          Password: this.password\n        },\n        ServiceAccessToken: {\n          AccessLicenseNumber: this.accessKey\n        }\n      },\n      TrackRequest: {\n        Request: {\n          RequestOption: '1',\n          TransactionReference: {\n            CustomerContext: 'Workspace Shipping Dashboard'\n          }\n        },\n        InquiryNumber: trackingNumber\n      }\n    };\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error(`UPS API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('UPS API request failed:', error);\n      throw error;\n    }\n  }\n  parseStatus(statusCode, description) {\n    const lowerDescription = description.toLowerCase();\n    if (lowerDescription.includes('delivered') || statusCode === 'M') {\n      return 'delivered';\n    } else if (lowerDescription.includes('in transit') || lowerDescription.includes('picked up') || statusCode === 'I') {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n  async getTrackingStatus(trackingNumber) {\n    try {\n      var _response$trackRespon, _response$trackRespon2, _response$trackRespon3, _response$trackRespon4, _latestActivity$statu, _latestActivity$statu2, _packageData$delivery, _latestActivity$locat, _latestActivity$statu3;\n      const response = await this.makeRequest(trackingNumber);\n      if (!((_response$trackRespon = response.trackResponse) !== null && _response$trackRespon !== void 0 && (_response$trackRespon2 = _response$trackRespon.shipment) !== null && _response$trackRespon2 !== void 0 && (_response$trackRespon3 = _response$trackRespon2[0]) !== null && _response$trackRespon3 !== void 0 && (_response$trackRespon4 = _response$trackRespon3.package) !== null && _response$trackRespon4 !== void 0 && _response$trackRespon4[0])) {\n        throw new Error('Invalid tracking response format');\n      }\n      const packageData = response.trackResponse.shipment[0].package[0];\n      const activities = packageData.activity || [];\n      const latestActivity = activities[0]; // Most recent activity\n\n      const status = this.parseStatus((latestActivity === null || latestActivity === void 0 ? void 0 : (_latestActivity$statu = latestActivity.status) === null || _latestActivity$statu === void 0 ? void 0 : _latestActivity$statu.code) || '', (latestActivity === null || latestActivity === void 0 ? void 0 : (_latestActivity$statu2 = latestActivity.status) === null || _latestActivity$statu2 === void 0 ? void 0 : _latestActivity$statu2.description) || '');\n      return {\n        trackingNumber,\n        status,\n        lastActivity: latestActivity ? `${latestActivity.date} ${latestActivity.time}` : '',\n        estimatedDelivery: (_packageData$delivery = packageData.deliveryDate) === null || _packageData$delivery === void 0 ? void 0 : _packageData$delivery.date,\n        currentLocation: latestActivity !== null && latestActivity !== void 0 && (_latestActivity$locat = latestActivity.location) !== null && _latestActivity$locat !== void 0 && _latestActivity$locat.address ? `${latestActivity.location.address.city}, ${latestActivity.location.address.stateProvinceCode}` : undefined,\n        statusDescription: (latestActivity === null || latestActivity === void 0 ? void 0 : (_latestActivity$statu3 = latestActivity.status) === null || _latestActivity$statu3 === void 0 ? void 0 : _latestActivity$statu3.description) || 'Status unknown'\n      };\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(async trackingNumber => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending',\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable'\n        };\n      }\n    });\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const upsApiService = new UPSApiService();\n\n// Mock service for development (when UPS API credentials aren't available)\nexport class MockUPSApiService {\n  async getTrackingStatus(trackingNumber) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock different statuses based on tracking number\n    const statusMap = {\n      'UPS123456789': 'pending',\n      'FEDEX987654321': 'shipped',\n      'USPS555666777': 'delivered',\n      'DHL888999000': 'shipped'\n    };\n    const status = statusMap[trackingNumber] || 'pending';\n    return {\n      trackingNumber,\n      status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: `Mock ${status} status for ${trackingNumber}`\n    };\n  }\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(trackingNumber => this.getTrackingStatus(trackingNumber));\n    return Promise.all(promises);\n  }\n}\nexport const mockUpsApiService = new MockUPSApiService();","map":{"version":3,"names":["UPSApiService","constructor","baseUrl","accessKey","username","password","process","env","REACT_APP_UPS_ACCESS_KEY","REACT_APP_UPS_USERNAME","REACT_APP_UPS_PASSWORD","makeRequest","trackingNumber","requestBody","UPSSecurity","UsernameToken","Username","Password","ServiceAccessToken","AccessLicenseNumber","TrackRequest","Request","RequestOption","TransactionReference","CustomerContext","InquiryNumber","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","parseStatus","statusCode","description","lowerDescription","toLowerCase","includes","getTrackingStatus","_response$trackRespon","_response$trackRespon2","_response$trackRespon3","_response$trackRespon4","_latestActivity$statu","_latestActivity$statu2","_packageData$delivery","_latestActivity$locat","_latestActivity$statu3","trackResponse","shipment","package","packageData","activities","activity","latestActivity","code","lastActivity","date","time","estimatedDelivery","deliveryDate","currentLocation","location","address","city","stateProvinceCode","undefined","statusDescription","getBatchTrackingStatus","trackingNumbers","promises","map","Promise","all","upsApiService","MockUPSApiService","resolve","setTimeout","statusMap","Date","toISOString","mockUpsApiService"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/upsApi.ts"],"sourcesContent":["// UPS API Service for tracking information\n// Note: You'll need to sign up for UPS API access at https://developer.ups.com/\n\ninterface UPSTrackingResponse {\n  trackResponse: {\n    shipment: Array<{\n      package: Array<{\n        trackingNumber: string;\n        activity: Array<{\n          location: {\n            address: {\n              city: string;\n              stateProvinceCode: string;\n              countryCode: string;\n            };\n          };\n          status: {\n            type: string;\n            description: string;\n            code: string;\n          };\n          date: string;\n          time: string;\n        }>;\n        deliveryDate: {\n          date: string;\n          time: string;\n        };\n        deliveryTime: {\n          beginTime: string;\n          endTime: string;\n        };\n      }>;\n    }>;\n  };\n}\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n}\n\nclass UPSApiService {\n  private baseUrl = 'https://onlinetools.ups.com/rest/Track';\n  private accessKey: string;\n  private username: string;\n  private password: string;\n\n  constructor() {\n    // These should be stored in environment variables\n    this.accessKey = process.env.REACT_APP_UPS_ACCESS_KEY || '';\n    this.username = process.env.REACT_APP_UPS_USERNAME || '';\n    this.password = process.env.REACT_APP_UPS_PASSWORD || '';\n  }\n\n  private async makeRequest(trackingNumber: string): Promise<UPSTrackingResponse> {\n    const requestBody = {\n      UPSSecurity: {\n        UsernameToken: {\n          Username: this.username,\n          Password: this.password,\n        },\n        ServiceAccessToken: {\n          AccessLicenseNumber: this.accessKey,\n        },\n      },\n      TrackRequest: {\n        Request: {\n          RequestOption: '1',\n          TransactionReference: {\n            CustomerContext: 'Workspace Shipping Dashboard',\n          },\n        },\n        InquiryNumber: trackingNumber,\n      },\n    };\n\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        throw new Error(`UPS API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data as UPSTrackingResponse;\n    } catch (error) {\n      console.error('UPS API request failed:', error);\n      throw error;\n    }\n  }\n\n  private parseStatus(statusCode: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerDescription.includes('delivered') || statusCode === 'M') {\n      return 'delivered';\n    } else if (lowerDescription.includes('in transit') || lowerDescription.includes('picked up') || statusCode === 'I') {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    try {\n      const response = await this.makeRequest(trackingNumber);\n      \n      if (!response.trackResponse?.shipment?.[0]?.package?.[0]) {\n        throw new Error('Invalid tracking response format');\n      }\n\n      const packageData = response.trackResponse.shipment[0].package[0];\n      const activities = packageData.activity || [];\n      const latestActivity = activities[0]; // Most recent activity\n\n      const status = this.parseStatus(\n        latestActivity?.status?.code || '',\n        latestActivity?.status?.description || ''\n      );\n\n      return {\n        trackingNumber,\n        status,\n        lastActivity: latestActivity ? `${latestActivity.date} ${latestActivity.time}` : '',\n        estimatedDelivery: packageData.deliveryDate?.date,\n        currentLocation: latestActivity?.location?.address \n          ? `${latestActivity.location.address.city}, ${latestActivity.location.address.stateProvinceCode}`\n          : undefined,\n        statusDescription: latestActivity?.status?.description || 'Status unknown',\n      };\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const upsApiService = new UPSApiService();\n\n// Mock service for development (when UPS API credentials aren't available)\nexport class MockUPSApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses based on tracking number\n    const statusMap: Record<string, 'pending' | 'shipped' | 'delivered'> = {\n      'UPS123456789': 'pending',\n      'FEDEX987654321': 'shipped',\n      'USPS555666777': 'delivered',\n      'DHL888999000': 'shipped',\n    };\n\n    const status = statusMap[trackingNumber] || 'pending';\n    \n    return {\n      trackingNumber,\n      status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: `Mock ${status} status for ${trackingNumber}`,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockUpsApiService = new MockUPSApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}