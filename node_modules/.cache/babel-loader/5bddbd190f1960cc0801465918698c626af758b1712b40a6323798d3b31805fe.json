{"ast":null,"code":"// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.co/ for API access\n\nclass TrackshipApiService {\n  constructor() {\n    this.baseUrl = 'https://api.trackship.co/v1';\n    this.apiKey = void 0;\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n  }\n  async makeRequest(trackingNumber) {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n    console.log('Making Trackship API request for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n    try {\n      const requestBody = {\n        tracking_number: trackingNumber\n      };\n      console.log('Request body:', requestBody);\n      console.log('Request URL:', `${this.baseUrl}/track`);\n      const response = await fetch(`${this.baseUrl}/track`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Trackship API error: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('API Response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n  parseStatus(status, description) {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (lowerStatus.includes('in_transit') || lowerStatus.includes('picked_up') || lowerDescription.includes('in transit') || lowerDescription.includes('picked up')) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n  async getTrackingStatus(trackingNumber) {\n    try {\n      var _data$events;\n      console.log('Getting tracking status for:', trackingNumber);\n      const response = await this.makeRequest(trackingNumber);\n      if (!response.success || !response.data) {\n        console.error('API returned unsuccessful response:', response);\n        throw new Error(response.error || 'Failed to get tracking data');\n      }\n      const data = response.data;\n      const latestEvent = (_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events[0]; // Most recent event\n      const status = this.parseStatus(data.status, data.status_description);\n      const result = {\n        trackingNumber: data.tracking_number,\n        status,\n        lastActivity: (latestEvent === null || latestEvent === void 0 ? void 0 : latestEvent.timestamp) || '',\n        estimatedDelivery: data.estimated_delivery,\n        currentLocation: latestEvent === null || latestEvent === void 0 ? void 0 : latestEvent.location,\n        statusDescription: data.status_description,\n        carrier: data.carrier\n      };\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(async trackingNumber => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending',\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable'\n        };\n      }\n    });\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock different statuses and carriers based on tracking number\n    const mockData = {\n      'UPS123456789': {\n        status: 'pending',\n        carrier: 'UPS'\n      },\n      'FEDEX987654321': {\n        status: 'shipped',\n        carrier: 'FedEx'\n      },\n      'USPS555666777': {\n        status: 'delivered',\n        carrier: 'USPS'\n      },\n      'DHL888999000': {\n        status: 'shipped',\n        carrier: 'DHL'\n      },\n      '1Z999AA1234567890': {\n        status: 'shipped',\n        carrier: 'UPS'\n      },\n      '9400100000000000000000': {\n        status: 'delivered',\n        carrier: 'USPS'\n      }\n    };\n    const mockInfo = mockData[trackingNumber] || {\n      status: 'pending',\n      carrier: 'Unknown'\n    };\n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully'\n    };\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier\n    };\n  }\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(trackingNumber => this.getTrackingStatus(trackingNumber));\n    return Promise.all(promises);\n  }\n}\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  if (useRealApi && hasCredentials) {\n    console.log('Using real Trackship API');\n    return trackshipApiService;\n  }\n  console.log('Using mock Trackship API');\n  return mockTrackshipApiService;\n};","map":{"version":3,"names":["TrackshipApiService","constructor","baseUrl","apiKey","process","env","REACT_APP_TRACKSHIP_API_KEY","console","log","makeRequest","trackingNumber","Error","substring","requestBody","tracking_number","response","fetch","method","headers","body","JSON","stringify","status","Object","fromEntries","entries","ok","errorText","text","error","data","json","parseStatus","description","lowerStatus","toLowerCase","lowerDescription","includes","getTrackingStatus","_data$events","success","latestEvent","events","status_description","result","lastActivity","timestamp","estimatedDelivery","estimated_delivery","currentLocation","location","statusDescription","carrier","getBatchTrackingStatus","trackingNumbers","promises","map","Promise","all","trackshipApiService","MockTrackshipApiService","resolve","setTimeout","mockData","mockInfo","statusDescriptions","pending","shipped","delivered","Date","toISOString","undefined","mockTrackshipApiService","getTrackingService","useRealApi","REACT_APP_USE_REAL_TRACKSHIP_API","hasCredentials"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/trackshipApi.ts"],"sourcesContent":["// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.co/ for API access\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nexport interface TrackshipResponse {\n  success: boolean;\n  data?: {\n    tracking_number: string;\n    carrier: string;\n    status: string;\n    status_description: string;\n    estimated_delivery?: string;\n    events: Array<{\n      status: string;\n      status_description: string;\n      location?: string;\n      timestamp: string;\n    }>;\n  };\n  error?: string;\n}\n\nclass TrackshipApiService {\n  private baseUrl = 'https://api.trackship.co/v1';\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n  }\n\n  private async makeRequest(trackingNumber: string): Promise<TrackshipResponse> {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n\n    console.log('Making Trackship API request for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n\n    try {\n      const requestBody = {\n        tracking_number: trackingNumber,\n      };\n\n      console.log('Request body:', requestBody);\n      console.log('Request URL:', `${this.baseUrl}/track`);\n\n      const response = await fetch(`${this.baseUrl}/track`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Trackship API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response data:', data);\n      return data as TrackshipResponse;\n    } catch (error) {\n      console.error('Trackship API request failed:', error);\n      throw error;\n    }\n  }\n\n  private parseStatus(status: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (\n      lowerStatus.includes('in_transit') || \n      lowerStatus.includes('picked_up') || \n      lowerDescription.includes('in transit') ||\n      lowerDescription.includes('picked up')\n    ) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    try {\n      console.log('Getting tracking status for:', trackingNumber);\n      const response = await this.makeRequest(trackingNumber);\n      \n      if (!response.success || !response.data) {\n        console.error('API returned unsuccessful response:', response);\n        throw new Error(response.error || 'Failed to get tracking data');\n      }\n\n      const data = response.data;\n      const latestEvent = data.events?.[0]; // Most recent event\n      const status = this.parseStatus(data.status, data.status_description);\n\n      const result = {\n        trackingNumber: data.tracking_number,\n        status,\n        lastActivity: latestEvent?.timestamp || '',\n        estimatedDelivery: data.estimated_delivery,\n        currentLocation: latestEvent?.location,\n        statusDescription: data.status_description,\n        carrier: data.carrier,\n      };\n\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses and carriers based on tracking number\n    const mockData: Record<string, { status: 'pending' | 'shipped' | 'delivered', carrier: string }> = {\n      'UPS123456789': { status: 'pending', carrier: 'UPS' },\n      'FEDEX987654321': { status: 'shipped', carrier: 'FedEx' },\n      'USPS555666777': { status: 'delivered', carrier: 'USPS' },\n      'DHL888999000': { status: 'shipped', carrier: 'DHL' },\n      '1Z999AA1234567890': { status: 'shipped', carrier: 'UPS' },\n      '9400100000000000000000': { status: 'delivered', carrier: 'USPS' },\n    };\n\n    const mockInfo = mockData[trackingNumber] || { status: 'pending', carrier: 'Unknown' };\n    \n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully',\n    };\n\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  \n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  \n  if (useRealApi && hasCredentials) {\n    console.log('Using real Trackship API');\n    return trackshipApiService;\n  }\n  \n  console.log('Using mock Trackship API');\n  return mockTrackshipApiService;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}