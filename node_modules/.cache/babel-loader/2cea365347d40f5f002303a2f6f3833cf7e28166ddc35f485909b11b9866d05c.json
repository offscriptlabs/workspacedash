{"ast":null,"code":"class NetlifyApiService {\n  constructor() {\n    this.baseUrl = void 0;\n    // Use the current domain for Netlify functions\n    this.baseUrl = window.location.origin;\n  }\n  async getTrackingStatus(trackingNumber, orderId, postalCode) {\n    try {\n      console.log('Making Netlify API request for:', trackingNumber);\n      const response = await fetch(`${this.baseUrl}/.netlify/functions/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId: orderId || `order_${Date.now()}`,\n          postalCode: postalCode || '00000'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Netlify API response:', data);\n      if (!data.success) {\n        throw new Error(data.error || 'API request failed');\n      }\n      return data.data;\n    } catch (error) {\n      console.error('Netlify API request failed:', error);\n      throw error;\n    }\n  }\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending',\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable'\n        };\n      }\n    });\n    return Promise.all(promises);\n  }\n}\nexport const netlifyApiService = new NetlifyApiService();","map":{"version":3,"names":["NetlifyApiService","constructor","baseUrl","window","location","origin","getTrackingStatus","trackingNumber","orderId","postalCode","console","log","response","fetch","method","headers","body","JSON","stringify","Date","now","ok","Error","status","data","json","success","error","getBatchTrackingStatus","trackingNumbers","promises","map","index","lastActivity","statusDescription","Promise","all","netlifyApiService"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/netlifyApi.ts"],"sourcesContent":["import { TrackingStatus } from './trackshipApi';\n\nclass NetlifyApiService {\n  private baseUrl: string;\n\n  constructor() {\n    // Use the current domain for Netlify functions\n    this.baseUrl = window.location.origin;\n  }\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Making Netlify API request for:', trackingNumber);\n      \n      const response = await fetch(`${this.baseUrl}/.netlify/functions/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId: orderId || `order_${Date.now()}`,\n          postalCode: postalCode || '00000'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Netlify API response:', data);\n\n      if (!data.success) {\n        throw new Error(data.error || 'API request failed');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Netlify API request failed:', error);\n      throw error;\n    }\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nexport const netlifyApiService = new NetlifyApiService(); "],"mappings":"AAEA,MAAMA,iBAAiB,CAAC;EAGtBC,WAAWA,CAAA,EAAG;IAAA,KAFNC,OAAO;IAGb;IACA,IAAI,CAACA,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;EACvC;EAEA,MAAMC,iBAAiBA,CAACC,cAAsB,EAAEC,OAAgB,EAAEC,UAAmB,EAA2B;IAC9G,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEJ,cAAc,CAAC;MAE9D,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,8BAA8B,EAAE;QAC1EY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBX,cAAc;UACdC,OAAO,EAAEA,OAAO,IAAI,SAASW,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACzCX,UAAU,EAAEA,UAAU,IAAI;QAC5B,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClCf,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEa,IAAI,CAAC;MAE1C,IAAI,CAACA,IAAI,CAACE,OAAO,EAAE;QACjB,MAAM,IAAIJ,KAAK,CAACE,IAAI,CAACG,KAAK,IAAI,oBAAoB,CAAC;MACrD;MAEA,OAAOH,IAAI,CAACA,IAAI;IAClB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMC,sBAAsBA,CAACC,eAAyB,EAA6B;IACjF,MAAMC,QAAQ,GAAGD,eAAe,CAACE,GAAG,CAAC,OAAOxB,cAAc,EAAEyB,KAAK,KAAK;MACpE,IAAI;QACF,OAAO,MAAM,IAAI,CAAC1B,iBAAiB,CAACC,cAAc,EAAE,SAASyB,KAAK,EAAE,CAAC;MACvE,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,mBAAmBpB,cAAc,GAAG,EAAEoB,KAAK,CAAC;QAC1D,OAAO;UACLpB,cAAc;UACdgB,MAAM,EAAE,SAAkB;UAC1BU,YAAY,EAAE,EAAE;UAChBC,iBAAiB,EAAE;QACrB,CAAC;MACH;IACF,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;EAC9B;AACF;AAEA,OAAO,MAAMO,iBAAiB,GAAG,IAAIrC,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}