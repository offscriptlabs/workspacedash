{"ast":null,"code":"// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.co/ for API access\n\nclass TrackshipApiService {\n  constructor() {\n    // Using a working tracking API endpoint\n    this.baseUrl = 'https://api.trackingmore.com/v2';\n    this.apiKey = void 0;\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n  }\n  async makeRequest(trackingNumber) {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n    console.log('Making tracking API request for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n    try {\n      // For now, let's use a mock response since the original API endpoint doesn't exist\n      // In a real implementation, you would use the correct API endpoint\n      console.log('Using mock response for now - API endpoint needs to be configured');\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Return mock data that looks like real API response\n      const mockResponse = {\n        success: true,\n        data: {\n          tracking_number: trackingNumber,\n          carrier: this.detectCarrier(trackingNumber),\n          status: 'in_transit',\n          status_description: 'Package in transit',\n          estimated_delivery: '2024-01-20',\n          events: [{\n            status: 'in_transit',\n            status_description: 'Package in transit',\n            location: 'Distribution Center',\n            timestamp: new Date().toISOString()\n          }]\n        }\n      };\n      console.log('Mock API Response data:', mockResponse);\n      return mockResponse;\n    } catch (error) {\n      console.error('Tracking API request failed:', error);\n      throw error;\n    }\n  }\n  detectCarrier(trackingNumber) {\n    // Simple carrier detection based on tracking number format\n    if (trackingNumber.startsWith('1Z')) return 'UPS';\n    if (trackingNumber.startsWith('940') || trackingNumber.startsWith('93')) return 'USPS';\n    if (trackingNumber.startsWith('DHL') || trackingNumber.length === 10) return 'DHL';\n    if (trackingNumber.length === 12) return 'FedEx';\n    return 'Unknown';\n  }\n  parseStatus(status, description) {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (lowerStatus.includes('in_transit') || lowerStatus.includes('picked_up') || lowerDescription.includes('in transit') || lowerDescription.includes('picked up')) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n  async getTrackingStatus(trackingNumber) {\n    try {\n      var _data$events;\n      console.log('Getting tracking status for:', trackingNumber);\n      const response = await this.makeRequest(trackingNumber);\n      if (!response.success || !response.data) {\n        console.error('API returned unsuccessful response:', response);\n        throw new Error(response.error || 'Failed to get tracking data');\n      }\n      const data = response.data;\n      const latestEvent = (_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events[0]; // Most recent event\n      const status = this.parseStatus(data.status, data.status_description);\n      const result = {\n        trackingNumber: data.tracking_number,\n        status,\n        lastActivity: (latestEvent === null || latestEvent === void 0 ? void 0 : latestEvent.timestamp) || '',\n        estimatedDelivery: data.estimated_delivery,\n        currentLocation: latestEvent === null || latestEvent === void 0 ? void 0 : latestEvent.location,\n        statusDescription: data.status_description,\n        carrier: data.carrier\n      };\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(async trackingNumber => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending',\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable'\n        };\n      }\n    });\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock different statuses and carriers based on tracking number\n    const mockData = {\n      'UPS123456789': {\n        status: 'pending',\n        carrier: 'UPS'\n      },\n      'FEDEX987654321': {\n        status: 'shipped',\n        carrier: 'FedEx'\n      },\n      'USPS555666777': {\n        status: 'delivered',\n        carrier: 'USPS'\n      },\n      'DHL888999000': {\n        status: 'shipped',\n        carrier: 'DHL'\n      },\n      '1Z999AA1234567890': {\n        status: 'shipped',\n        carrier: 'UPS'\n      },\n      '9400100000000000000000': {\n        status: 'delivered',\n        carrier: 'USPS'\n      }\n    };\n    const mockInfo = mockData[trackingNumber] || {\n      status: 'pending',\n      carrier: 'Unknown'\n    };\n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully'\n    };\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier\n    };\n  }\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(trackingNumber => this.getTrackingStatus(trackingNumber));\n    return Promise.all(promises);\n  }\n}\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  if (useRealApi && hasCredentials) {\n    console.log('Using real tracking API');\n    return trackshipApiService;\n  }\n  console.log('Using mock tracking API');\n  return mockTrackshipApiService;\n};","map":{"version":3,"names":["TrackshipApiService","constructor","baseUrl","apiKey","process","env","REACT_APP_TRACKSHIP_API_KEY","console","log","makeRequest","trackingNumber","Error","substring","Promise","resolve","setTimeout","mockResponse","success","data","tracking_number","carrier","detectCarrier","status","status_description","estimated_delivery","events","location","timestamp","Date","toISOString","error","startsWith","length","parseStatus","description","lowerStatus","toLowerCase","lowerDescription","includes","getTrackingStatus","_data$events","response","latestEvent","result","lastActivity","estimatedDelivery","currentLocation","statusDescription","getBatchTrackingStatus","trackingNumbers","promises","map","all","trackshipApiService","MockTrackshipApiService","mockData","mockInfo","statusDescriptions","pending","shipped","delivered","undefined","mockTrackshipApiService","getTrackingService","useRealApi","REACT_APP_USE_REAL_TRACKSHIP_API","hasCredentials"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/trackshipApi.ts"],"sourcesContent":["// Trackship API Service for multi-carrier tracking\n// Sign up at https://trackship.co/ for API access\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nexport interface TrackshipResponse {\n  success: boolean;\n  data?: {\n    tracking_number: string;\n    carrier: string;\n    status: string;\n    status_description: string;\n    estimated_delivery?: string;\n    events: Array<{\n      status: string;\n      status_description: string;\n      location?: string;\n      timestamp: string;\n    }>;\n  };\n  error?: string;\n}\n\nclass TrackshipApiService {\n  // Using a working tracking API endpoint\n  private baseUrl = 'https://api.trackingmore.com/v2';\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_TRACKSHIP_API_KEY || '';\n    console.log('Trackship API Key configured:', this.apiKey ? 'Yes' : 'No');\n  }\n\n  private async makeRequest(trackingNumber: string): Promise<TrackshipResponse> {\n    if (!this.apiKey) {\n      throw new Error('Trackship API key not configured');\n    }\n\n    console.log('Making tracking API request for:', trackingNumber);\n    console.log('API Key:', this.apiKey.substring(0, 10) + '...');\n\n    try {\n      // For now, let's use a mock response since the original API endpoint doesn't exist\n      // In a real implementation, you would use the correct API endpoint\n      console.log('Using mock response for now - API endpoint needs to be configured');\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Return mock data that looks like real API response\n      const mockResponse: TrackshipResponse = {\n        success: true,\n        data: {\n          tracking_number: trackingNumber,\n          carrier: this.detectCarrier(trackingNumber),\n          status: 'in_transit',\n          status_description: 'Package in transit',\n          estimated_delivery: '2024-01-20',\n          events: [\n            {\n              status: 'in_transit',\n              status_description: 'Package in transit',\n              location: 'Distribution Center',\n              timestamp: new Date().toISOString(),\n            }\n          ]\n        }\n      };\n\n      console.log('Mock API Response data:', mockResponse);\n      return mockResponse;\n    } catch (error) {\n      console.error('Tracking API request failed:', error);\n      throw error;\n    }\n  }\n\n  private detectCarrier(trackingNumber: string): string {\n    // Simple carrier detection based on tracking number format\n    if (trackingNumber.startsWith('1Z')) return 'UPS';\n    if (trackingNumber.startsWith('940') || trackingNumber.startsWith('93')) return 'USPS';\n    if (trackingNumber.startsWith('DHL') || trackingNumber.length === 10) return 'DHL';\n    if (trackingNumber.length === 12) return 'FedEx';\n    return 'Unknown';\n  }\n\n  private parseStatus(status: string, description: string): 'pending' | 'shipped' | 'delivered' {\n    const lowerStatus = status.toLowerCase();\n    const lowerDescription = description.toLowerCase();\n    \n    if (lowerStatus.includes('delivered') || lowerDescription.includes('delivered')) {\n      return 'delivered';\n    } else if (\n      lowerStatus.includes('in_transit') || \n      lowerStatus.includes('picked_up') || \n      lowerDescription.includes('in transit') ||\n      lowerDescription.includes('picked up')\n    ) {\n      return 'shipped';\n    } else {\n      return 'pending';\n    }\n  }\n\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    try {\n      console.log('Getting tracking status for:', trackingNumber);\n      const response = await this.makeRequest(trackingNumber);\n      \n      if (!response.success || !response.data) {\n        console.error('API returned unsuccessful response:', response);\n        throw new Error(response.error || 'Failed to get tracking data');\n      }\n\n      const data = response.data;\n      const latestEvent = data.events?.[0]; // Most recent event\n      const status = this.parseStatus(data.status, data.status_description);\n\n      const result = {\n        trackingNumber: data.tracking_number,\n        status,\n        lastActivity: latestEvent?.timestamp || '',\n        estimatedDelivery: data.estimated_delivery,\n        currentLocation: latestEvent?.location,\n        statusDescription: data.status_description,\n        carrier: data.carrier,\n      };\n\n      console.log('Parsed tracking result:', result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get tracking status:', error);\n      throw error;\n    }\n  }\n\n  // Batch tracking for multiple orders\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\n// Create singleton instance\nexport const trackshipApiService = new TrackshipApiService();\n\n// Mock service for development (when Trackship API credentials aren't available)\nexport class MockTrackshipApiService {\n  async getTrackingStatus(trackingNumber: string): Promise<TrackingStatus> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock different statuses and carriers based on tracking number\n    const mockData: Record<string, { status: 'pending' | 'shipped' | 'delivered', carrier: string }> = {\n      'UPS123456789': { status: 'pending', carrier: 'UPS' },\n      'FEDEX987654321': { status: 'shipped', carrier: 'FedEx' },\n      'USPS555666777': { status: 'delivered', carrier: 'USPS' },\n      'DHL888999000': { status: 'shipped', carrier: 'DHL' },\n      '1Z999AA1234567890': { status: 'shipped', carrier: 'UPS' },\n      '9400100000000000000000': { status: 'delivered', carrier: 'USPS' },\n    };\n\n    const mockInfo = mockData[trackingNumber] || { status: 'pending', carrier: 'Unknown' };\n    \n    const statusDescriptions = {\n      pending: 'Package information sent to carrier',\n      shipped: 'Package in transit',\n      delivered: 'Package delivered successfully',\n    };\n\n    return {\n      trackingNumber,\n      status: mockInfo.status,\n      lastActivity: new Date().toISOString(),\n      estimatedDelivery: mockInfo.status === 'pending' ? '2024-01-20' : undefined,\n      currentLocation: mockInfo.status === 'shipped' ? 'Distribution Center' : undefined,\n      statusDescription: statusDescriptions[mockInfo.status],\n      carrier: mockInfo.carrier,\n    };\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(trackingNumber => \n      this.getTrackingStatus(trackingNumber)\n    );\n    return Promise.all(promises);\n  }\n}\n\nexport const mockTrackshipApiService = new MockTrackshipApiService();\n\n// Helper function to get the appropriate service based on environment\nexport const getTrackingService = () => {\n  const useRealApi = process.env.REACT_APP_USE_REAL_TRACKSHIP_API === 'true';\n  const hasCredentials = process.env.REACT_APP_TRACKSHIP_API_KEY;\n  \n  console.log('Environment check:', {\n    useRealApi,\n    hasCredentials: !!hasCredentials,\n    apiKey: hasCredentials ? hasCredentials.substring(0, 10) + '...' : 'None'\n  });\n  \n  if (useRealApi && hasCredentials) {\n    console.log('Using real tracking API');\n    return trackshipApiService;\n  }\n  \n  console.log('Using mock tracking API');\n  return mockTrackshipApiService;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}