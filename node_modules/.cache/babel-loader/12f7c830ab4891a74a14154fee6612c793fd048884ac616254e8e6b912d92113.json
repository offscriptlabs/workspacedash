{"ast":null,"code":"// Proxy API Service for Trackship tracking\n// This service calls our local proxy server to avoid CORS issues\n\nclass ProxyApiService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3001/api';\n  }\n  async getTrackingStatus(trackingNumber, orderId, postalCode) {\n    try {\n      console.log('Making proxy API request for:', trackingNumber);\n      const response = await fetch(`${this.baseUrl}/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId,\n          postalCode\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Proxy API error: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Proxy API response:', data);\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to get tracking data');\n      }\n      return data.data;\n    } catch (error) {\n      console.error('Proxy API request failed:', error);\n      throw error;\n    }\n  }\n  async getBatchTrackingStatus(trackingNumbers) {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending',\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable'\n        };\n      }\n    });\n    return Promise.all(promises);\n  }\n}\nexport const proxyApiService = new ProxyApiService();","map":{"version":3,"names":["ProxyApiService","constructor","baseUrl","getTrackingStatus","trackingNumber","orderId","postalCode","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","success","error","getBatchTrackingStatus","trackingNumbers","promises","map","index","lastActivity","statusDescription","Promise","all","proxyApiService"],"sources":["/Users/peterrousseau/Shipping Dashboard/src/services/proxyApi.ts"],"sourcesContent":["// Proxy API Service for Trackship tracking\n// This service calls our local proxy server to avoid CORS issues\n\nexport interface TrackingStatus {\n  trackingNumber: string;\n  status: 'pending' | 'shipped' | 'delivered';\n  lastActivity: string;\n  estimatedDelivery?: string;\n  currentLocation?: string;\n  statusDescription: string;\n  carrier?: string;\n}\n\nclass ProxyApiService {\n  private baseUrl = 'http://localhost:3001/api';\n\n  async getTrackingStatus(trackingNumber: string, orderId?: string, postalCode?: string): Promise<TrackingStatus> {\n    try {\n      console.log('Making proxy API request for:', trackingNumber);\n\n      const response = await fetch(`${this.baseUrl}/tracking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          trackingNumber,\n          orderId,\n          postalCode,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Proxy API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Proxy API response:', data);\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to get tracking data');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Proxy API request failed:', error);\n      throw error;\n    }\n  }\n\n  async getBatchTrackingStatus(trackingNumbers: string[]): Promise<TrackingStatus[]> {\n    const promises = trackingNumbers.map(async (trackingNumber, index) => {\n      try {\n        return await this.getTrackingStatus(trackingNumber, `batch_${index}`);\n      } catch (error) {\n        console.error(`Failed to track ${trackingNumber}:`, error);\n        return {\n          trackingNumber,\n          status: 'pending' as const,\n          lastActivity: '',\n          statusDescription: 'Tracking unavailable',\n        };\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nexport const proxyApiService = new ProxyApiService(); "],"mappings":"AAAA;AACA;;AAYA,MAAMA,eAAe,CAAC;EAAAC,YAAA;IAAA,KACZC,OAAO,GAAG,2BAA2B;EAAA;EAE7C,MAAMC,iBAAiBA,CAACC,cAAsB,EAAEC,OAAgB,EAAEC,UAAmB,EAA2B;IAC9G,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEJ,cAAc,CAAC;MAE5D,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACR,OAAO,WAAW,EAAE;QACvDS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBX,cAAc;UACdC,OAAO;UACPC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MACxD;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCb,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEW,IAAI,CAAC;MAExC,IAAI,CAACA,IAAI,CAACE,OAAO,EAAE;QACjB,MAAM,IAAIJ,KAAK,CAACE,IAAI,CAACG,KAAK,IAAI,6BAA6B,CAAC;MAC9D;MAEA,OAAOH,IAAI,CAACA,IAAI;IAClB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMC,sBAAsBA,CAACC,eAAyB,EAA6B;IACjF,MAAMC,QAAQ,GAAGD,eAAe,CAACE,GAAG,CAAC,OAAOtB,cAAc,EAAEuB,KAAK,KAAK;MACpE,IAAI;QACF,OAAO,MAAM,IAAI,CAACxB,iBAAiB,CAACC,cAAc,EAAE,SAASuB,KAAK,EAAE,CAAC;MACvE,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdf,OAAO,CAACe,KAAK,CAAC,mBAAmBlB,cAAc,GAAG,EAAEkB,KAAK,CAAC;QAC1D,OAAO;UACLlB,cAAc;UACdc,MAAM,EAAE,SAAkB;UAC1BU,YAAY,EAAE,EAAE;UAChBC,iBAAiB,EAAE;QACrB,CAAC;MACH;IACF,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;EAC9B;AACF;AAEA,OAAO,MAAMO,eAAe,GAAG,IAAIhC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}